// Code generated by go-bindata.
// sources:
// schema/service.json
// schema/stack.json
// docs/swagger.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaServiceJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x31\x4f\x03\x31\x0c\x85\xf7\xfb\x15\x96\xd5\x8d\x86\x54\x82\x85\xfc\x06\x06\xf6\xea\xa8\xac\xc6\xbd\x0b\xf4\x92\xe0\x98\x01\x50\xff\x3b\x4a\x52\x55\xb7\x77\xc9\xf0\xf2\xbd\xf7\x6c\xff\x0d\x00\xb8\x29\xc7\x99\x17\x42\x07\x38\xab\x66\x67\xed\x47\x49\xd1\x74\xf5\x31\xc9\x64\xbd\xd0\x49\xcd\xee\xd9\x5e\xc9\x6d\xb5\x65\x49\x99\x45\x03\x17\x74\x50\x83\x00\xb0\x28\x1d\x3f\x0f\xc1\xdf\x14\x00\xd4\x9f\xcc\x35\xbb\xa8\x84\x38\x35\x6f\xd3\x33\xa9\xb2\xc4\xfa\xf5\xbe\x27\xf3\x3b\xd6\x67\x67\x5e\x0e\xe3\xc3\x06\x1b\x74\xe9\x2c\x46\x5a\xf8\xee\xc4\x1b\xb5\x84\xf8\xca\x71\xd2\x19\x1d\x3c\xf5\x9e\xe1\xda\x85\xc2\x5f\xdf\x41\xb8\xce\xbf\xef\xb5\xdb\xd5\x52\x63\x63\xc8\xfb\xa0\x21\x45\x3a\xbf\xad\x2f\x70\xa2\x73\xe1\xe1\x32\xfc\x07\x00\x00\xff\xff\x67\xf5\x00\x07\x53\x01\x00\x00")

func schemaServiceJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaServiceJson,
		"schema/service.json",
	)
}

func schemaServiceJson() (*asset, error) {
	bytes, err := schemaServiceJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/service.json", size: 339, mode: os.FileMode(420), modTime: time.Unix(1516413875, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaStackJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xc1\x4a\xc4\x30\x10\x86\xef\x7d\x8a\x61\xd8\x83\xba\xc6\x2e\xe8\xc5\x5c\x7c\x01\x11\xc1\xe3\x52\x61\xd8\xce\xb6\x23\xdb\x34\x4e\x46\x41\x65\xdf\x5d\x92\x14\xed\x2d\xf3\xcd\xff\xe5\x4f\x7e\x1a\x00\xdc\xa4\xc3\xc8\x13\xa1\x07\x1c\xcd\xa2\x6f\xdb\xb7\x34\x07\x57\xe9\xcd\xac\x43\xdb\x2b\x1d\xcd\xed\xee\xda\x25\x79\x9d\xb5\xa8\x73\x64\x35\xe1\x84\x1e\xf2\x45\x00\xf8\x44\x13\xff\x4d\x00\x68\x5f\x31\xcf\x98\x4c\x25\x0c\xc5\x2b\x3c\x92\x19\x6b\xc8\xab\xd7\x3d\xb9\xef\x6e\x7b\xf1\xe0\x5d\x3e\xed\xdc\x7d\xb7\xbd\xbc\xda\xfc\x67\x27\x09\x8f\x1c\x06\x1b\xd1\xc3\x6d\x81\xe7\xba\xc3\x17\xd6\x4f\x39\xac\xfa\x57\x8d\x12\x8c\x07\x56\xac\x42\xb3\x48\xa8\xfc\xfe\x21\xca\x3d\x7a\xd8\xd7\xd7\x76\x85\x53\xdf\x8b\xc9\x1c\xe8\xf4\xbc\xfe\xd6\x91\x4e\x89\x9b\x73\xf3\x1b\x00\x00\xff\xff\x3a\xee\x42\x2c\x28\x01\x00\x00")

func schemaStackJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaStackJson,
		"schema/stack.json",
	)
}

func schemaStackJson() (*asset, error) {
	bytes, err := schemaStackJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/stack.json", size: 296, mode: os.FileMode(420), modTime: time.Unix(1516408820, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docsSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdf\x6f\xdb\x36\x10\x7e\xcf\x5f\x41\x68\x7d\xd8\x8f\xca\x72\xd2\x60\x68\xfc\xb2\x05\x4d\xb1\x04\xd8\x82\x60\xe9\xf6\x92\x79\x01\x2d\x9d\x25\x36\x12\xc9\x90\xb4\x1b\xd7\xd0\xff\x3e\x90\xfa\x61\x52\x96\x1d\xc9\xb0\xdb\x00\xeb\x9b\x4d\xde\x1d\xbf\xfb\x78\xfc\x78\xb4\x97\x47\x08\x79\x21\xa3\x72\x96\x81\xf4\x46\xe8\xee\x08\x21\x84\x3c\xcc\x79\x4a\x42\xac\x08\xa3\xc1\x47\xc9\xa8\x77\x84\xd0\xf8\xb5\xb6\xe5\x82\x45\xb3\xb0\x9b\xad\x0c\x13\x70\xc2\x26\x4a\x71\x69\xcd\x7f\xc2\x71\x0c\xc2\x1b\x21\xef\x64\x30\xf4\xcc\x18\xa1\x53\xe6\x8d\xd0\xb2\x70\x50\x44\xa5\xa0\xe7\x2f\x17\x1c\xc4\x0d\xc6\xb7\xe8\x16\xc4\x1c\x04\x3a\xbf\xb9\x1a\x18\x8f\x02\xbf\xc2\xa1\xaa\xdd\x10\xf2\x28\xce\x8c\xdf\xf9\x13\xa4\xe8\xbd\x0a\x13\x98\x83\x10\x8b\xd2\x03\x21\x0f\x32\x4c\x52\x6d\x81\x9f\x20\xfd\x15\x6a\x8b\xc1\x84\x7c\xf6\x8c\x51\x5e\x46\x4f\x49\x08\x54\x42\x5b\xf4\x3f\xae\x3e\xac\x22\xce\x84\x89\xa7\x73\x1c\x05\x01\xe3\x40\x25\x9b\x89\x10\x06\x4c\xc4\x41\x19\x44\x06\xda\xc5\x09\x3f\x07\x21\x09\xa3\xda\xf5\x78\x30\x1c\x0c\xf5\xac\x99\xf3\x12\x26\x75\x4e\x5e\xca\x42\x9c\x9a\x2f\x66\x78\x82\x25\xdc\x60\x95\xe8\xa9\x60\x7e\x5c\x0c\x72\xac\x12\xb9\xe2\x2d\x98\x1f\x07\x11\xf0\x94\x2d\x82\xa5\xb5\x3f\xf7\x24\xca\x83\x84\xb1\x07\x19\x2c\xb9\x60\x73\x12\x81\xc8\xed\xc4\x62\xb0\x59\x44\xc8\x8b\x40\x86\x82\x70\x55\x22\xfc\x20\x88\xde\x31\x44\xe1\x13\x2a\xe2\x67\x40\x15\x9a\x32\x81\x9a\xeb\xa0\xa9\x60\x19\xb2\x96\x79\xbd\x8a\xaa\x70\xbc\xaa\x8a\x72\xec\xc2\x84\xf3\xea\xa1\xb1\x65\xcf\x38\x08\x13\xf8\x2a\xd2\x28\x38\x93\xaa\x30\xbf\x64\xec\xe1\x12\xd3\x28\x05\x61\xc7\x17\x20\x39\xd3\x74\xeb\x64\xf2\x72\x3c\x77\x68\xd7\x0c\xc1\x1c\xa8\x92\x7d\xf2\xff\x0d\x14\x52\x09\x20\xe3\x89\x52\x52\xee\xc9\x96\xb4\xde\x6b\xcb\x4e\x59\xc5\xa0\x8c\xb1\x7c\x2e\x21\x3b\xfc\xc9\x70\xd8\x18\x42\xc8\x7b\x25\x60\xaa\x23\x7e\x17\xd4\x7e\x41\x03\x47\x45\x87\xfd\x69\x9d\x20\xca\x22\xd8\x89\x1f\xe3\xd8\x89\x9f\x6b\x16\x41\x57\x7a\xb4\xed\x61\xd8\x71\x51\x74\x23\x47\x82\x98\x93\x70\x37\x7e\x2a\xdf\x4e\x14\xdd\x16\xc6\x5d\x59\x2a\xcd\xdb\x88\xe2\x58\xe0\x0c\x14\x88\xe6\x1a\x0d\x8a\x38\x56\x0a\x84\x41\xfc\xef\xdd\xd0\x3f\xc3\xfe\x74\xbc\x7c\x9b\xfb\xf5\xe7\xd3\xdc\x3f\xad\xbf\xbc\xc9\xfd\xbb\xb7\x67\x78\x32\x76\x46\xaa\xcf\xc7\x27\xf9\x2b\x0b\x43\x91\xe5\x82\x1b\xfd\x94\x4a\x10\x1a\x37\x67\x2b\x75\xbd\x55\x38\x7c\xb8\xba\x68\x4e\x13\x83\xeb\x71\x06\x62\xd1\xbe\x65\xe3\xbd\x96\xc6\x1a\xfb\xad\xd5\x51\xdf\x02\xbc\x10\xed\xcd\x25\xf0\x4e\x00\x56\x75\x05\xfc\x43\xff\x84\xc7\x19\x48\x35\x42\xe5\x42\xc5\x7c\x39\xba\xcf\xd2\xd0\xc8\x4a\xfb\x7e\x67\xe8\x78\x9f\x44\x6d\x3c\x46\xc1\x92\x44\xbd\xee\x22\x7d\x96\x70\xc5\x23\x9a\x2c\x10\x89\x9e\xa5\x4b\x57\x54\xcf\x73\x74\x10\xbd\xd9\x07\x57\x81\x54\xb8\xff\xed\x65\x9c\xcc\x85\xfd\xff\x62\x4e\xe3\xdf\x4d\xaa\x8d\x67\x37\xa1\xee\x45\x92\x89\x7b\x18\x8e\x5c\x1c\x7b\x12\x2c\x13\x74\x6f\x0c\x18\x35\xda\x81\x82\xae\x62\xd4\x81\x82\x0d\x45\xb2\xab\x10\x69\xe7\x43\x1c\x26\x6d\xfc\xd5\xca\x64\x1b\x47\xad\x1d\xd0\xb3\xe5\x54\x8a\x50\xf8\xd0\xb3\x09\xea\xcd\xd9\x96\x3e\xe8\xab\xc9\x50\xf9\xd8\x0b\x52\xac\xc0\xe1\xa9\xb3\x1c\x15\x9e\xa8\x7a\x35\x3e\xc3\xda\xdf\xa5\x59\x47\xde\x4a\x73\xf3\x56\x38\x08\x6d\x6b\x78\xb6\xd0\x56\xbf\x83\x23\x98\x12\x4a\x34\x50\xeb\x85\x5b\x6d\x80\x45\x61\xd5\x55\xb2\xc9\x47\x08\x57\x05\xb5\xfa\x11\xa1\xf4\x41\x02\xb8\x00\xa9\x9f\x5a\x08\x57\x6d\xd7\x60\x65\x2f\xe0\x71\x46\x04\x44\x0e\x99\x45\x57\x7a\xd4\x60\xd1\xe3\x42\xb3\xa8\x48\x83\x13\x2f\x34\xa2\x19\xdd\x63\xd5\xe4\x6a\x4b\xef\xeb\x4d\x99\xc8\x8c\x87\x17\x61\x05\xbe\x22\x19\xb8\x06\x4f\x7e\xcc\xfc\xaa\x3f\x2e\x84\x39\x3a\xb7\x9e\x75\xb9\xb5\x5b\x09\x93\x6a\x6d\xa7\xaa\xd5\xb1\x10\x78\xe1\xc6\x26\x0a\xb2\xa6\xfd\x3a\x5e\x7b\xe7\x36\x43\xbb\x34\x6b\xb7\xc2\x22\x51\x1f\x46\x0e\xfa\x12\x71\x31\x5f\x5d\xb4\x03\x2e\xe7\x1d\xc8\x8d\xc3\x59\x15\x96\x36\x1d\xb8\x4b\x6c\x4b\x2e\x23\xf4\x77\xa0\xb1\xf9\x29\xe7\xcd\xe6\xb4\xb1\xff\x79\xe8\x9f\x8d\x7f\xfa\xfe\x97\x91\x5f\x7f\xf9\xe1\xc7\x6d\xb9\x5c\x5b\xc5\xea\x66\x63\xa4\xf7\xfe\xc5\x6e\x42\xf5\xe6\x6b\xc5\x3e\xe3\xd1\xc1\x0f\xd5\x5f\xc5\x1a\xce\xa1\x5a\xeb\x99\x8c\x07\xc7\xe1\x03\x8e\x8d\x53\x4c\x54\x32\x9b\x0c\x42\x96\x05\xc9\x82\x83\x90\x21\x4e\xa1\xf8\xc8\x31\x96\x41\x84\x15\x9e\x60\x09\x01\x50\x45\xd4\xc2\xfd\x01\xb0\xb8\xd9\x7a\xe9\x98\xb9\x3e\x5d\x15\xd3\x43\xcf\x6a\xd8\x75\x2f\x0d\xbb\xee\x50\xf8\x06\xc9\x17\x2e\xfb\xd6\xda\xb8\x5d\xef\x45\x1c\x20\x84\x2a\x88\x9d\xeb\xcc\x29\x0d\x42\xd5\xcf\xa7\x5f\x76\xcb\xdf\xb1\x8c\x33\xd9\xf3\x06\xb3\x1c\x5b\x0a\x00\x95\x53\x56\x21\xbc\xe0\x0b\xea\xc5\x8a\xd0\x26\xfd\xf9\xa6\x9d\xfd\xb5\xd3\x82\xb0\xfa\xa7\x63\xf7\x13\xba\x79\xf1\xb5\xd6\xf2\x50\x67\xb8\xee\x4b\xd7\xdb\xe1\xb6\xae\xd4\xfc\x09\x86\xdd\xc3\xb7\x6a\x8d\xad\xde\xb6\xf9\xa6\xc8\xb7\xdf\x12\x3d\xe2\xda\x4f\xa7\x96\xa8\x2d\x42\xd4\x33\x78\x15\x61\xbd\x81\x3f\xca\xff\x0b\x00\x00\xff\xff\x14\x8c\xda\xf4\x62\x1c\x00\x00")

func docsSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_docsSwaggerJson,
		"docs/swagger.json",
	)
}

func docsSwaggerJson() (*asset, error) {
	bytes, err := docsSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/swagger.json", size: 7266, mode: os.FileMode(420), modTime: time.Unix(1516418469, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/service.json": schemaServiceJson,
	"schema/stack.json": schemaStackJson,
	"docs/swagger.json": docsSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"docs": &bintree{nil, map[string]*bintree{
		"swagger.json": &bintree{docsSwaggerJson, map[string]*bintree{}},
	}},
	"schema": &bintree{nil, map[string]*bintree{
		"service.json": &bintree{schemaServiceJson, map[string]*bintree{}},
		"stack.json": &bintree{schemaStackJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

