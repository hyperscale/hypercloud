// Code generated by go-bindata.
// sources:
// schema/service.json
// schema/stack.json
// docs/swagger.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaServiceJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x53\xbb\x6e\xeb\x30\x0c\xdd\xfd\x15\x82\x90\xe1\xde\x1b\x2b\xce\x0b\x17\x89\x97\xa2\x7b\x81\x76\xe8\x54\x5b\x0d\xd8\x48\x8e\xdd\x3a\xb2\x2b\x31\x43\x6a\xf8\xdf\x0b\xc9\x8f\x3c\x60\x14\xe8\x96\x89\x87\x14\x1f\xe7\x80\x54\xe5\x11\x42\x47\x66\x9b\xca\x3d\xd0\x90\xd0\x14\xb1\x0c\x83\xe0\xdd\x14\x8a\x35\xd1\x49\xa1\x77\x81\xd0\x90\x20\x9b\x2e\x83\x36\xd3\xb7\x65\xa5\x2e\x4a\xa9\x31\x93\x86\x86\xc4\x36\x22\x84\x66\xa2\xc7\x84\x50\x3c\x96\xd2\x76\x35\xa8\x33\xb5\x73\x55\x2e\x5e\x02\xa2\xd4\xca\x3e\xbd\x46\x53\xb6\x06\x96\xf0\x6a\x55\xb3\x1e\x2f\x6b\xb6\xec\x9d\x45\xcd\xa2\xd5\x1a\xde\xf8\x45\xa4\xc3\xb3\x79\x3d\xa2\xae\x71\xdd\xf4\xa7\x06\x61\xfb\xb1\xb9\x05\x26\x0a\xf6\xf2\xd7\x2c\x80\x7d\xf1\xf1\x9f\xbb\x90\x59\x34\x65\x6b\x3e\xfe\xfb\x6f\x74\xca\xdd\x67\xea\x41\xaa\x1d\xa6\x34\x24\x8b\x8b\x69\x5b\x2d\x01\xa5\xd8\x00\x0e\xcc\x8c\xfa\xa1\x84\xaa\x43\x9e\x53\x3e\x38\x3d\x8e\x85\x95\x6c\xcd\xbc\x33\xcf\x8d\x89\xe3\xf0\x0a\x44\x63\xc6\x9b\x82\x2b\xdd\x87\x52\xdc\x08\x93\xb4\x30\x68\x06\x49\x80\xd6\x70\x1c\xe0\x00\x79\xfe\x98\xd8\x8c\x36\x40\xfa\xda\x9f\x56\x38\xb8\xc6\x7b\xf6\x62\xf7\x77\x82\x8c\x57\x33\xff\xff\xac\x3e\x7b\x8c\xe3\x49\xeb\xf1\x6a\xee\x77\xf4\x9d\x84\x16\x71\xaf\xf3\x9c\x28\xaa\xe5\xe7\x21\xd3\x52\x38\x15\xee\xc2\xfc\xb3\x9b\x77\x42\x28\x08\x91\x61\x56\x28\xc8\x9f\xce\x3f\x69\x02\xb9\x91\x5e\xed\x7d\x07\x00\x00\xff\xff\x60\xde\xf1\x83\xf6\x03\x00\x00")

func schemaServiceJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaServiceJson,
		"schema/service.json",
	)
}

func schemaServiceJson() (*asset, error) {
	bytes, err := schemaServiceJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/service.json", size: 1014, mode: os.FileMode(420), modTime: time.Unix(1515804073, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaStackJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x3d\x53\xc2\x40\x10\xed\xf3\x2b\x6e\x6e\x28\x54\x3c\x83\x40\x01\x69\x1c\x2c\xac\x2c\x2c\xec\x92\xe8\x2c\xdc\x02\xe7\x24\x97\xb8\xb7\x30\xa3\x4c\xfe\xbb\x73\x09\xe0\xc1\x50\x68\xb5\x1f\xb7\x6f\xdf\xdb\x37\xb7\x8b\x84\x90\x3d\xb7\x58\x63\x09\x32\x11\x72\xcd\x5c\x27\x71\xfc\xe1\x2a\xab\xba\xee\x5d\x45\xab\x58\x13\x2c\x59\x0d\xc6\xf1\x7e\xf2\xd6\xc3\x6a\xaa\x6a\x24\x36\xe8\x64\x22\xfc\x22\x21\xa4\xd1\xc7\x5c\x08\xc9\x5f\x35\xfa\xad\x8e\xc9\xd8\x55\x8b\x6a\xfb\x35\x30\x23\x59\xff\xf4\x96\x0e\xd4\x74\xa6\x9e\x40\x2d\xf3\xdd\xa4\x51\x61\x39\x6e\xd4\x38\xac\x47\x8d\x4a\x27\xd3\xd9\x23\xcc\xf3\xf3\x76\x50\xde\x0f\x9b\x9e\x6c\x99\x9a\x8e\x50\x5a\x28\xf1\xdf\xb2\x40\x7d\xe7\xfd\xab\x87\x44\xf9\x6c\xa0\xa6\x79\xff\xfa\xa6\xf7\x3b\x5b\x1a\xfb\x8c\x76\xc5\x6b\x99\x88\xd1\x09\x9b\x43\xda\x9a\x45\x60\x4a\xc0\x68\x37\xe5\x1c\xe9\x54\xdd\x16\xc9\x99\xca\xfe\x75\x7c\x41\x08\x8c\xfa\x1d\xf8\x02\x22\x3d\xde\xe4\xc1\x45\x21\xf3\x8b\xc7\x65\x99\xf6\xe6\xfa\x30\x3c\x84\xd7\x2e\x64\x59\x72\x96\xa4\x7d\x95\x77\x80\x83\xad\xd1\x5e\x8d\x24\xfc\xdc\x18\x42\xdd\x32\xb7\x2e\xb7\x7c\x12\xb4\x36\x6c\x2a\x0b\xc5\x4b\xf8\x47\x96\x50\x38\x8c\x9a\xe8\x27\x00\x00\xff\xff\xf2\xd5\xec\x65\x75\x02\x00\x00")

func schemaStackJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaStackJson,
		"schema/stack.json",
	)
}

func schemaStackJson() (*asset, error) {
	bytes, err := schemaStackJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/stack.json", size: 629, mode: os.FileMode(420), modTime: time.Unix(1515804161, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docsSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdf\x6f\xdb\x36\x10\x7e\xcf\x5f\x41\x68\x7d\xd8\x8f\xca\x72\xda\x60\x68\xf2\xb2\x05\xcd\xb0\x04\xd8\x8a\x00\xe9\xf6\x12\x78\xc1\x59\x3a\x4b\x6c\x24\x92\x25\x69\x37\xae\xa1\xff\x7d\x20\xf5\x93\xb2\xec\x58\x99\xdd\x75\x5d\xdf\x24\xf2\xee\xe3\xdd\x47\xde\x27\x9e\xbd\x3a\x22\xc4\x0b\x39\x53\xf3\x0c\x95\x77\x46\x6e\x8f\x08\x21\xc4\x03\x21\x52\x1a\x82\xa6\x9c\x05\xef\x14\x67\xde\x11\x21\x93\xe7\xc6\x56\x48\x1e\xcd\xc3\xdd\x6c\x55\x98\xa0\x03\x9b\x68\x2d\x54\x6b\xfe\x03\xc4\x31\x4a\xef\x8c\x78\x2f\x46\x63\xcf\x8e\x51\x36\xe3\xde\x19\x59\x15\x0e\x9a\xea\x14\xcd\xfc\xe5\x52\xa0\xbc\x06\xb8\x21\x37\x28\x17\x28\xc9\xf9\xf5\xd5\xc8\x7a\x14\xf1\x6b\x08\x75\xed\x46\x88\xc7\x20\xb3\x7e\xe7\x0f\x98\x92\x5f\x74\x98\xe0\x02\xa5\x5c\x96\x1e\x84\x78\x98\x01\x4d\x8d\x05\x3c\x60\xfa\x33\xd6\x16\xa3\x29\xfd\xe8\x59\xa3\xbc\x44\x4f\x69\x88\x4c\x61\x1f\xfa\xef\x57\x6f\x1b\xc4\xb9\xb4\x78\x26\xc7\xb3\x20\xe0\x02\x99\xe2\x73\x19\xe2\x88\xcb\x38\x28\x41\x54\x60\x5c\x1c\xf8\x05\x4a\x45\x39\x33\xae\xc7\xa3\xf1\x68\x6c\x66\xed\x9c\x97\x70\x65\x72\xf2\x52\x1e\x42\x6a\x5f\xec\xf0\x14\x14\x5e\x83\x4e\xcc\x54\xb0\x38\x2e\x06\x05\xe8\x44\x35\xbc\x05\x8b\xe3\x20\x42\x91\xf2\x65\xb0\x6a\xed\xcf\x1d\x8d\xf2\x20\xe1\xfc\x5e\x05\x2b\x21\xf9\x82\x46\x28\xf3\x76\x62\x31\xb6\x59\x24\xc4\x8b\x50\x85\x92\x0a\x5d\x46\xf8\x56\x52\xb3\x63\x84\xe1\x07\x52\xe0\x67\xc8\x34\x99\x71\x49\xba\xeb\x90\x99\xe4\x19\x69\x2d\xf3\xbc\x41\xd5\x10\x37\xa7\xa2\x1c\xbb\xb0\x70\x5e\x3d\x34\x69\xd9\x73\x81\xd2\x02\x5f\x45\x26\x0a\xc1\x95\x2e\xcc\x2f\x39\xbf\xbf\x04\x16\xa5\x28\xdb\xf8\x12\x95\xe0\x86\x6e\x93\x4c\x5e\x8e\xe7\x0e\xed\x86\x21\xc6\x23\x54\x43\xd2\xff\x15\x35\xd1\x09\x12\xeb\x48\x52\x5a\x6e\xc9\x96\xac\xde\xf0\x08\x77\xca\x29\x46\x6d\x6c\xd5\x63\xd9\xb4\xc1\x5f\x8c\xc7\x9d\x21\x42\xbc\x67\x12\x67\x06\xf0\x9b\xa0\xf6\x0b\xdc\x28\x2a\x2a\xda\x4f\xeb\xe4\x28\x94\x0b\x1a\x3e\x8d\x9f\xca\x77\x27\x8a\x6e\x0a\xe3\x5d\x59\x2a\xcd\xfb\x88\x12\x20\x21\x43\x8d\xb2\xbb\x46\x87\x22\x01\x5a\xa3\xb4\x11\xff\x75\x3b\xf6\x4f\xc1\x9f\x4d\x56\xaf\x72\xbf\x7e\x3e\xc9\xfd\x93\xfa\xe5\x65\xee\xdf\xbe\x3a\x85\xe9\xc4\x19\xa9\x9e\x8f\x5f\xe4\xcf\x5a\x31\x14\x59\x2e\x85\x95\x07\xa5\x25\x65\x71\x77\xb6\x12\x8f\x1b\x0d\xe1\xfd\xd5\x45\x77\x9a\xda\xb8\xde\xcf\x51\x2e\xfb\xb7\x6c\xb2\xd7\xa3\xb1\xc6\x7e\xef\xe9\xa8\x45\x4e\x14\x9a\xb4\xf9\x08\xbc\x96\x08\xba\x3e\x01\xfb\xdc\x7b\xb3\x74\x69\x3f\xac\x48\x8e\xf7\xc9\xc4\xc6\x3a\x09\x56\x34\x1a\xa4\xa5\xa6\x58\xa0\x22\x8a\x4c\x97\x84\x46\x8f\xd2\x65\x8e\xcc\xc0\x42\x39\x88\xa0\xec\x83\xab\x40\x69\xd0\x83\xe5\xc5\x3a\xd9\x0f\xce\xff\x8b\x39\x13\xff\xd3\xb4\xd8\x7a\xee\xa6\xc4\x83\x48\xb2\xb8\x87\xe1\xc8\x8d\x63\x4f\x8a\x64\x41\xf7\xc6\x80\x55\xa3\x27\x50\xb0\xab\x18\xed\x40\xc1\x86\x43\xf2\x54\x21\x32\xce\x87\x28\x26\x63\xfc\xaf\x1d\x93\x6d\x1c\xf5\x5e\x71\x1e\x3d\x4e\xa5\x08\x85\xf7\x03\x6f\x39\x83\x39\xdb\x72\xd1\xf9\xb4\x32\x54\x37\x24\x11\xce\x28\xa3\x26\xd2\x56\xab\x51\x21\xb5\x38\xac\xee\x3f\x7c\xfa\x0e\xc3\x86\x99\xa6\x9b\x2b\x7d\x88\x44\x21\x51\x21\xd3\x8a\x00\x29\x07\x47\x8d\xbd\xc4\xf7\x73\x2a\x31\x72\xb8\x2c\xee\x4f\x47\x1d\x1a\x4d\x5f\x2a\x50\x6a\xda\xe1\xc4\x0b\x6d\xf5\x47\x77\xa0\xbb\x5c\x6d\xb9\xa5\x79\x33\x2e\x33\xeb\xe1\x45\xa0\xd1\xd7\x34\x43\xd7\xe0\xc1\x8f\xb9\x5f\xdd\xe4\x0a\x85\x89\xce\x75\x43\x67\xde\xda\x2d\xd3\xba\xad\xed\x54\xb5\x3a\x48\x09\x4b\x17\x9b\x6a\xcc\xba\xf6\xeb\xf1\xb6\x77\x6e\x73\x68\x97\x76\xed\xde\xb0\x68\x34\x84\x91\x83\xde\x99\xdd\x98\xaf\x2e\xfa\x03\x2e\xe7\x9d\x90\x3b\xc5\x59\x1d\x2c\x63\x3a\x72\x97\xd8\x96\x5c\x46\xd9\x6f\xc8\x62\xdb\x53\xbf\xdc\x9c\x36\xf8\x1f\xc7\xfe\xe9\xe4\x87\x6f\x7f\x3a\xf3\xeb\x97\xef\xbe\xdf\x96\xcb\x9b\xd6\x61\x75\xb3\xb1\x1a\x72\xf7\xd9\x6e\x42\xd5\x9d\xf4\xc6\x3e\x17\xd1\xc1\x8b\xea\x8f\x62\x0d\xa7\xa8\xd6\x3e\xfe\xd6\x43\x40\x78\x0f\xb1\x75\x8a\xa9\x4e\xe6\xd3\x51\xc8\xb3\x20\x59\x0a\x94\x2a\x84\x14\x8b\x47\x01\xa0\x82\x08\x34\x4c\x41\x61\x80\x4c\x53\xbd\x74\x7f\x89\x29\x24\x7a\x90\x8e\xd9\xef\x80\xab\x62\x66\xe8\xcb\xd3\xb0\xcf\xf6\x9c\xfe\x13\xb1\xb0\xbb\xf7\x5f\x90\x8a\xf5\x7b\x8a\x13\x27\x65\x1a\x63\xe7\x86\xe0\x6c\x3f\x65\xfa\xc7\x93\x6d\xa5\x5e\xc1\xf7\x2e\xde\xfc\x3e\x79\x88\xb5\xff\x2c\xd1\x3f\x69\x8d\xbf\xe6\x99\xe0\x6a\xe0\x95\xa5\xe5\xd8\x53\xf1\xa4\x9c\x6a\x55\xfe\xd7\x6a\xde\x5f\x35\x7f\xfd\x58\x0e\xff\x58\x7e\x79\x35\x5c\x37\x22\xeb\xfd\x4f\x5f\x1b\x62\xff\x7e\x02\xb7\xf8\x9a\x5e\xa8\xd5\xcc\x74\xbb\xa1\x7c\xfb\xb5\x60\x00\x6e\xbb\xe9\xeb\x41\xed\x11\xa2\x81\xe0\x15\xc2\x7a\xc7\x76\x94\xff\x1d\x00\x00\xff\xff\x9b\x81\x74\x83\xdc\x1b\x00\x00")

func docsSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_docsSwaggerJson,
		"docs/swagger.json",
	)
}

func docsSwaggerJson() (*asset, error) {
	bytes, err := docsSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/swagger.json", size: 7132, mode: os.FileMode(420), modTime: time.Unix(1516066641, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/service.json": schemaServiceJson,
	"schema/stack.json": schemaStackJson,
	"docs/swagger.json": docsSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"docs": &bintree{nil, map[string]*bintree{
		"swagger.json": &bintree{docsSwaggerJson, map[string]*bintree{}},
	}},
	"schema": &bintree{nil, map[string]*bintree{
		"service.json": &bintree{schemaServiceJson, map[string]*bintree{}},
		"stack.json": &bintree{schemaStackJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

