// Code generated by go-bindata.
// sources:
// schema/service.json
// schema/stack.json
// docs/swagger.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaServiceJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x53\xbb\x6e\xeb\x30\x0c\xdd\xfd\x15\x82\x90\xe1\xde\x1b\x2b\xce\x0b\x17\x89\x97\xa2\x7b\x81\x76\xe8\x54\x5b\x0d\xd8\x48\x8e\xdd\x3a\xb2\x2b\x31\x43\x6a\xf8\xdf\x0b\xc9\x8f\x3c\x60\x14\xe8\x96\x89\x87\x14\x1f\xe7\x80\x54\xe5\x11\x42\x47\x66\x9b\xca\x3d\xd0\x90\xd0\x14\xb1\x0c\x83\xe0\xdd\x14\x8a\x35\xd1\x49\xa1\x77\x81\xd0\x90\x20\x9b\x2e\x83\x36\xd3\xb7\x65\xa5\x2e\x4a\xa9\x31\x93\x86\x86\xc4\x36\x22\x84\x66\xa2\xc7\x84\x50\x3c\x96\xd2\x76\x35\xa8\x33\xb5\x73\x55\x2e\x5e\x02\xa2\xd4\xca\x3e\xbd\x46\x53\xb6\x06\x96\xf0\x6a\x55\xb3\x1e\x2f\x6b\xb6\xec\x9d\x45\xcd\xa2\xd5\x1a\xde\xf8\x45\xa4\xc3\xb3\x79\x3d\xa2\xae\x71\xdd\xf4\xa7\x06\x61\xfb\xb1\xb9\x05\x26\x0a\xf6\xf2\xd7\x2c\x80\x7d\xf1\xf1\x9f\xbb\x90\x59\x34\x65\x6b\x3e\xfe\xfb\x6f\x74\xca\xdd\x67\xea\x41\xaa\x1d\xa6\x34\x24\x8b\x8b\x69\x5b\x2d\x01\xa5\xd8\x00\x0e\xcc\x8c\xfa\xa1\x84\xaa\x43\x9e\x53\x3e\x38\x3d\x8e\x85\x95\x6c\xcd\xbc\x33\xcf\x8d\x89\xe3\xf0\x0a\x44\x63\xc6\x9b\x82\x2b\xdd\x87\x52\xdc\x08\x93\xb4\x30\x68\x06\x49\x80\xd6\x70\x1c\xe0\x00\x79\xfe\x98\xd8\x8c\x36\x40\xfa\xda\x9f\x56\x38\xb8\xc6\x7b\xf6\x62\xf7\x77\x82\x8c\x57\x33\xff\xff\xac\x3e\x7b\x8c\xe3\x49\xeb\xf1\x6a\xee\x77\xf4\x9d\x84\x16\x71\xaf\xf3\x9c\x28\xaa\xe5\xe7\x21\xd3\x52\x38\x15\xee\xc2\xfc\xb3\x9b\x77\x42\x28\x08\x91\x61\x56\x28\xc8\x9f\xce\x3f\x69\x02\xb9\x91\x5e\xed\x7d\x07\x00\x00\xff\xff\x60\xde\xf1\x83\xf6\x03\x00\x00")

func schemaServiceJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaServiceJson,
		"schema/service.json",
	)
}

func schemaServiceJson() (*asset, error) {
	bytes, err := schemaServiceJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/service.json", size: 1014, mode: os.FileMode(420), modTime: time.Unix(1515804073, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaStackJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x3d\x53\xc2\x40\x10\xed\xf3\x2b\x6e\x6e\x28\x54\x3c\x83\x40\x01\x69\x1c\x2c\xac\x2c\x2c\xec\x92\xe8\x2c\xdc\x02\xe7\x24\x97\xb8\xb7\x30\xa3\x4c\xfe\xbb\x73\x09\xe0\xc1\x50\x68\xb5\x1f\xb7\x6f\xdf\xdb\x37\xb7\x8b\x84\x90\x3d\xb7\x58\x63\x09\x32\x11\x72\xcd\x5c\x27\x71\xfc\xe1\x2a\xab\xba\xee\x5d\x45\xab\x58\x13\x2c\x59\x0d\xc6\xf1\x7e\xf2\xd6\xc3\x6a\xaa\x6a\x24\x36\xe8\x64\x22\xfc\x22\x21\xa4\xd1\xc7\x5c\x08\xc9\x5f\x35\xfa\xad\x8e\xc9\xd8\x55\x8b\x6a\xfb\x35\x30\x23\x59\xff\xf4\x96\x0e\xd4\x74\xa6\x9e\x40\x2d\xf3\xdd\xa4\x51\x61\x39\x6e\xd4\x38\xac\x47\x8d\x4a\x27\xd3\xd9\x23\xcc\xf3\xf3\x76\x50\xde\x0f\x9b\x9e\x6c\x99\x9a\x8e\x50\x5a\x28\xf1\xdf\xb2\x40\x7d\xe7\xfd\xab\x87\x44\xf9\x6c\xa0\xa6\x79\xff\xfa\xa6\xf7\x3b\x5b\x1a\xfb\x8c\x76\xc5\x6b\x99\x88\xd1\x09\x9b\x43\xda\x9a\x45\x60\x4a\xc0\x68\x37\xe5\x1c\xe9\x54\xdd\x16\xc9\x99\xca\xfe\x75\x7c\x41\x08\x8c\xfa\x1d\xf8\x02\x22\x3d\xde\xe4\xc1\x45\x21\xf3\x8b\xc7\x65\x99\xf6\xe6\xfa\x30\x3c\x84\xd7\x2e\x64\x59\x72\x96\xa4\x7d\x95\x77\x80\x83\xad\xd1\x5e\x8d\x24\xfc\xdc\x18\x42\xdd\x32\xb7\x2e\xb7\x7c\x12\xb4\x36\x6c\x2a\x0b\xc5\x4b\xf8\x47\x96\x50\x38\x8c\x9a\xe8\x27\x00\x00\xff\xff\xf2\xd5\xec\x65\x75\x02\x00\x00")

func schemaStackJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaStackJson,
		"schema/stack.json",
	)
}

func schemaStackJson() (*asset, error) {
	bytes, err := schemaStackJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/stack.json", size: 629, mode: os.FileMode(420), modTime: time.Unix(1515804161, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docsSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdf\x6f\xdb\xb6\x13\x7f\xcf\x5f\x41\xe8\xdb\x87\xef\xb6\xca\xb2\xd3\x60\x68\xfc\xb2\x05\xcd\xb0\x18\xd8\x8a\x00\xe9\xf6\x12\x78\x01\x2d\x9d\x25\x36\x12\xc9\x92\xb4\x1b\xd7\xd0\xff\x3e\x90\xfa\x45\xca\xb2\x63\x79\x76\xd7\x15\x7d\x93\xc9\xbb\x0f\xef\x3e\xbc\x3b\xde\x25\xeb\x33\x84\xbc\x90\x51\xb9\xc8\x40\x7a\x63\x74\x7f\x86\x10\x42\x1e\xe6\x3c\x25\x21\x56\x84\xd1\xe0\xbd\x64\xd4\x3b\x43\x68\xfa\x52\xcb\x72\xc1\xa2\x45\xb8\x9f\xac\x0c\x13\x70\x60\x13\xa5\xb8\xb4\xf6\x3f\xe2\x38\x06\xe1\x8d\x91\x77\x3e\x18\x7a\x66\x8d\xd0\x39\xf3\xc6\x68\x5d\x28\x28\xa2\x52\xd0\xfb\x37\x2b\x0e\xe2\x16\xe3\x3b\x74\x07\x62\x09\x02\x5d\xdd\x4e\x06\x46\xa3\xb0\x5f\xe1\x50\xd5\x6a\x08\x79\x14\x67\x46\xef\xea\x09\x52\xf4\x8b\x0a\x13\x58\x82\x10\xab\x52\x03\x21\x0f\x32\x4c\x52\x2d\x81\x9f\x20\xfd\x19\x6a\x89\xc1\x8c\x7c\xf2\x8c\x50\x5e\xa2\xa7\x24\x04\x2a\xa1\x0b\xfd\xf7\xc9\xbb\x06\x71\x21\x0c\x9e\xf6\x71\x1c\x04\x8c\x03\x95\x6c\x21\x42\x18\x30\x11\x07\x25\x88\x0c\xb4\x8a\x03\xbf\x04\x21\x09\xa3\x5a\x75\x34\x18\x0e\x86\x7a\xd7\xec\x79\x09\x93\xda\x27\x2f\x65\x21\x4e\xcd\x0f\xb3\x3c\xc3\x12\x6e\xb1\x4a\xf4\x56\xb0\x1c\x15\x8b\x1c\xab\x44\x36\xbc\x05\xcb\x51\x10\x01\x4f\xd9\x2a\x58\x5b\xf7\xf3\x40\xa2\x3c\x48\x18\x7b\x94\xc1\x9a\x0b\xb6\x24\x11\x88\xdc\x76\x2c\x06\x9b\x45\x84\xbc\x08\x64\x28\x08\x57\xa5\x85\xef\x04\xd1\x37\x86\x28\x7c\x44\x05\x7e\x06\x54\xa1\x39\x13\xa8\x7d\x0e\x9a\x0b\x96\x21\xeb\x98\x97\x0d\xaa\xc2\x71\x13\x15\xe5\xda\xb5\x81\xf3\xea\xa5\xa9\x25\xcf\x38\x08\x03\x3c\x89\xb4\x15\x9c\x49\x55\x88\xdf\x30\xf6\x78\x83\x69\x94\x82\xb0\xf1\x05\x48\xce\x34\xdd\xda\x99\xbc\x5c\xcf\x1d\xda\x35\x43\x94\x45\x20\xfb\xb8\xff\x2b\x28\xa4\x12\x40\x46\x11\xa5\xa4\xbc\x92\x1d\x5e\xbd\x65\x11\xec\xe5\x53\x0c\x4a\xcb\xca\xe7\xbc\xb1\xc1\xcf\x87\xc3\xd6\x12\x42\xde\x0b\x01\x73\x0d\xf8\xbf\xa0\xd6\x0b\x5c\x2b\x2a\x2a\xec\xaf\x4d\x72\x24\x88\x25\x09\x0f\xe3\xa7\xd2\xdd\x8b\xa2\xbb\x42\x78\x5f\x96\x4a\xf1\x2e\xa2\x38\x16\x38\x03\x05\xa2\x7d\x46\x8b\x22\x8e\x95\x02\x61\x2c\xfe\xeb\x7e\xe8\x5f\x62\x7f\x3e\x5d\xbf\xce\xfd\xfa\xfb\x22\xf7\x2f\xea\x1f\xaf\x72\xff\xfe\xf5\x25\x9e\x4d\x9d\x95\xea\x7b\x74\x9e\xbf\xb0\x6c\x28\xbc\x5c\x71\x53\x1e\xa4\x12\x84\xc6\xed\xdd\xaa\x78\xdc\x29\x1c\x3e\x4e\xae\xdb\xdb\xc4\xd8\xf5\x61\x01\x62\xd5\x7d\x65\xd3\xa3\x86\xc6\x06\xfb\x9d\xd1\x51\x17\x39\x5e\xd4\xa4\xed\x21\xf0\x46\x00\x56\x75\x04\x1c\xf3\xee\xf5\xd1\xa5\x7c\xbf\x24\x19\x1d\x93\x89\xad\x79\x12\xac\x49\xd4\xab\x96\xea\x64\xc1\x15\x51\x68\xb6\x42\x24\x7a\x96\x2e\x1d\x32\x3d\x13\xe5\x24\x05\xe5\x50\xae\xb4\xfd\x87\x55\x14\xa3\xb9\x5f\x3d\xe9\x45\x92\xc1\x3d\x0d\x47\xae\x1d\x47\xca\x2b\x03\x7a\x34\x06\x4c\x4e\x1d\x40\xc1\xbe\x29\xb5\x07\x05\x5b\x82\xe4\xd0\x74\xd2\xca\xa7\x48\x26\x2d\xfc\xaf\x85\xc9\x2e\x8e\x3a\x1f\xea\x67\xc3\x49\xb3\x55\x70\xd5\xef\xad\xee\xcd\xd9\x8e\xe7\xfa\xf3\x96\xa1\xba\xad\x8e\x60\x4e\x28\xd1\x96\x5a\x0d\x73\x85\x64\x71\x58\xbd\xe2\x6c\xf6\x1e\xc2\x86\x99\x66\x26\x29\x75\x90\x00\x2e\x40\x02\x55\x12\x61\x54\x2e\x0e\x1a\x79\x01\x1f\x16\x44\x40\xe4\x70\x59\x74\x01\x67\x2d\x1a\xf5\x74\xc5\x41\x28\xd2\xe2\xc4\x0b\x4d\xf6\x47\x0f\x58\xb5\xb9\xda\xd1\x6b\x78\x73\x26\x32\xa3\xe1\x45\x58\x81\xaf\x48\x06\xae\xc0\x93\x1f\x33\xbf\xea\x47\x8a\x0a\x13\x5d\xa9\x86\xce\xdc\xba\x2d\x3d\x80\x6c\xdc\x54\x75\x3a\x16\x02\xaf\x5c\x6c\xa2\x20\x6b\xcb\x6f\xda\x6b\xdf\xdc\x76\xd3\x6e\xcc\xd9\x9d\x66\x91\xa8\x0f\x23\x27\xed\xfc\x5c\x9b\x27\xd7\xdd\x06\x97\xfb\x8e\xc9\xad\xe4\xac\x02\x4b\x8b\x0e\xdc\x23\x76\x39\x97\x11\xfa\x1b\xd0\xd8\x4c\x86\xaf\xb6\xbb\x8d\xfd\x4f\x43\xff\x72\xfa\xc3\xff\x7f\x1a\xfb\xf5\x8f\xef\xbe\xdf\xe5\xcb\x5b\x2b\x58\x5d\x6f\x4c\x0d\x79\xf8\x62\x2f\xa1\xea\xb1\x3b\x6d\x5f\xf0\xe8\xe4\x49\xf5\x47\x71\x86\x93\x54\x1b\x8f\xbf\xd1\xe0\x38\x7c\xc4\xb1\x51\x8a\x89\x4a\x16\xb3\x41\xc8\xb2\x20\x59\x71\x10\x32\xc4\x29\x14\x9f\x1c\x63\x19\x44\x58\xe1\x19\x96\x10\x00\x55\x44\xad\xdc\xbf\x27\x14\x25\xba\x57\x1d\x33\xef\x80\x5b\xc5\xf4\xd2\xd7\x57\xc3\xbe\xd8\x38\xfd\x27\xc5\xc2\xdc\xde\x7f\xa1\x54\x6c\xf6\x29\x8e\x9d\x84\x2a\x88\x9d\x0e\xc1\xb9\x7e\x42\xd5\x8f\x17\xbb\x52\xbd\x82\xef\x3c\xbc\xf9\x2b\xdb\x29\xce\xfe\xb3\x44\xff\xac\x39\xfe\x86\x65\x9c\xc9\x9e\x2d\x8b\xa5\xd8\x91\xf1\xa8\xdc\xb2\x32\xff\x5b\x36\x1f\x2f\x9b\xbf\x3d\x96\xfd\x1f\xcb\xaf\x2f\x87\xeb\x41\x64\x73\xfe\xe9\x1a\x43\xcc\x3f\x51\xb0\x9b\x7c\xcd\x2c\x64\x0d\x33\xed\x69\x28\xdf\xdd\x16\xf4\xc0\xb5\x87\xbe\x0e\xd4\x8e\x42\xd4\x13\xbc\x42\xd8\x9c\xd8\xce\xf2\xbf\x03\x00\x00\xff\xff\x80\x70\xda\x24\xa2\x1a\x00\x00")

func docsSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_docsSwaggerJson,
		"docs/swagger.json",
	)
}

func docsSwaggerJson() (*asset, error) {
	bytes, err := docsSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/swagger.json", size: 6818, mode: os.FileMode(420), modTime: time.Unix(1515817996, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/service.json": schemaServiceJson,
	"schema/stack.json": schemaStackJson,
	"docs/swagger.json": docsSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"docs": &bintree{nil, map[string]*bintree{
		"swagger.json": &bintree{docsSwaggerJson, map[string]*bintree{}},
	}},
	"schema": &bintree{nil, map[string]*bintree{
		"service.json": &bintree{schemaServiceJson, map[string]*bintree{}},
		"stack.json": &bintree{schemaStackJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

