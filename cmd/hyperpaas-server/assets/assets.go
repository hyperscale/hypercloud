// Code generated by go-bindata.
// sources:
// schema/service.json
// schema/stack.json
// docs/swagger.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaServiceJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x53\xbb\x6e\xeb\x30\x0c\xdd\xfd\x15\x82\x90\xe1\xde\x1b\x2b\xce\x0b\x17\x89\x97\xa2\x7b\x81\x76\xe8\x54\x5b\x0d\xd8\x48\x8e\xdd\x3a\xb2\x2b\x31\x43\x6a\xf8\xdf\x0b\xc9\x8f\x3c\x60\x14\xe8\x96\x89\x87\x14\x1f\xe7\x80\x54\xe5\x11\x42\x47\x66\x9b\xca\x3d\xd0\x90\xd0\x14\xb1\x0c\x83\xe0\xdd\x14\x8a\x35\xd1\x49\xa1\x77\x81\xd0\x90\x20\x9b\x2e\x83\x36\xd3\xb7\x65\xa5\x2e\x4a\xa9\x31\x93\x86\x86\xc4\x36\x22\x84\x66\xa2\xc7\x84\x50\x3c\x96\xd2\x76\x35\xa8\x33\xb5\x73\x55\x2e\x5e\x02\xa2\xd4\xca\x3e\xbd\x46\x53\xb6\x06\x96\xf0\x6a\x55\xb3\x1e\x2f\x6b\xb6\xec\x9d\x45\xcd\xa2\xd5\x1a\xde\xf8\x45\xa4\xc3\xb3\x79\x3d\xa2\xae\x71\xdd\xf4\xa7\x06\x61\xfb\xb1\xb9\x05\x26\x0a\xf6\xf2\xd7\x2c\x80\x7d\xf1\xf1\x9f\xbb\x90\x59\x34\x65\x6b\x3e\xfe\xfb\x6f\x74\xca\xdd\x67\xea\x41\xaa\x1d\xa6\x34\x24\x8b\x8b\x69\x5b\x2d\x01\xa5\xd8\x00\x0e\xcc\x8c\xfa\xa1\x84\xaa\x43\x9e\x53\x3e\x38\x3d\x8e\x85\x95\x6c\xcd\xbc\x33\xcf\x8d\x89\xe3\xf0\x0a\x44\x63\xc6\x9b\x82\x2b\xdd\x87\x52\xdc\x08\x93\xb4\x30\x68\x06\x49\x80\xd6\x70\x1c\xe0\x00\x79\xfe\x98\xd8\x8c\x36\x40\xfa\xda\x9f\x56\x38\xb8\xc6\x7b\xf6\x62\xf7\x77\x82\x8c\x57\x33\xff\xff\xac\x3e\x7b\x8c\xe3\x49\xeb\xf1\x6a\xee\x77\xf4\x9d\x84\x16\x71\xaf\xf3\x9c\x28\xaa\xe5\xe7\x21\xd3\x52\x38\x15\xee\xc2\xfc\xb3\x9b\x77\x42\x28\x08\x91\x61\x56\x28\xc8\x9f\xce\x3f\x69\x02\xb9\x91\x5e\xed\x7d\x07\x00\x00\xff\xff\x60\xde\xf1\x83\xf6\x03\x00\x00")

func schemaServiceJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaServiceJson,
		"schema/service.json",
	)
}

func schemaServiceJson() (*asset, error) {
	bytes, err := schemaServiceJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/service.json", size: 1014, mode: os.FileMode(420), modTime: time.Unix(1515804073, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaStackJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x3d\x53\xc2\x40\x10\xed\xf3\x2b\x6e\x6e\x28\x54\x3c\x83\x40\x01\x69\x1c\x2c\xac\x2c\x2c\xec\x92\xe8\x2c\xdc\x02\xe7\x24\x97\xb8\xb7\x30\xa3\x4c\xfe\xbb\x73\x09\xe0\xc1\x50\x68\xb5\x1f\xb7\x6f\xdf\xdb\x37\xb7\x8b\x84\x90\x3d\xb7\x58\x63\x09\x32\x11\x72\xcd\x5c\x27\x71\xfc\xe1\x2a\xab\xba\xee\x5d\x45\xab\x58\x13\x2c\x59\x0d\xc6\xf1\x7e\xf2\xd6\xc3\x6a\xaa\x6a\x24\x36\xe8\x64\x22\xfc\x22\x21\xa4\xd1\xc7\x5c\x08\xc9\x5f\x35\xfa\xad\x8e\xc9\xd8\x55\x8b\x6a\xfb\x35\x30\x23\x59\xff\xf4\x96\x0e\xd4\x74\xa6\x9e\x40\x2d\xf3\xdd\xa4\x51\x61\x39\x6e\xd4\x38\xac\x47\x8d\x4a\x27\xd3\xd9\x23\xcc\xf3\xf3\x76\x50\xde\x0f\x9b\x9e\x6c\x99\x9a\x8e\x50\x5a\x28\xf1\xdf\xb2\x40\x7d\xe7\xfd\xab\x87\x44\xf9\x6c\xa0\xa6\x79\xff\xfa\xa6\xf7\x3b\x5b\x1a\xfb\x8c\x76\xc5\x6b\x99\x88\xd1\x09\x9b\x43\xda\x9a\x45\x60\x4a\xc0\x68\x37\xe5\x1c\xe9\x54\xdd\x16\xc9\x99\xca\xfe\x75\x7c\x41\x08\x8c\xfa\x1d\xf8\x02\x22\x3d\xde\xe4\xc1\x45\x21\xf3\x8b\xc7\x65\x99\xf6\xe6\xfa\x30\x3c\x84\xd7\x2e\x64\x59\x72\x96\xa4\x7d\x95\x77\x80\x83\xad\xd1\x5e\x8d\x24\xfc\xdc\x18\x42\xdd\x32\xb7\x2e\xb7\x7c\x12\xb4\x36\x6c\x2a\x0b\xc5\x4b\xf8\x47\x96\x50\x38\x8c\x9a\xe8\x27\x00\x00\xff\xff\xf2\xd5\xec\x65\x75\x02\x00\x00")

func schemaStackJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaStackJson,
		"schema/stack.json",
	)
}

func schemaStackJson() (*asset, error) {
	bytes, err := schemaStackJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/stack.json", size: 629, mode: os.FileMode(420), modTime: time.Unix(1515804161, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docsSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\x20\xb4\x3e\xec\x4f\x65\x39\x69\x30\x34\x79\xd9\x82\xa6\x58\x0c\x6c\x45\x80\x74\x7b\x09\xbc\x80\x96\xce\x12\x6b\x89\x64\x49\xda\x8d\x6b\xe8\xbb\x0f\xa4\xfe\x98\x94\x65\x47\xf2\xec\xae\x6b\xfb\xa6\x90\x77\x3f\xde\xfd\x78\x77\xbc\x73\x56\x27\x08\x79\x21\xa3\x72\x9e\x81\xf4\x2e\xd1\xfd\x09\x42\x08\x79\x98\xf3\x94\x84\x58\x11\x46\x83\x77\x92\x51\xef\x04\xa1\xf1\x73\x2d\xcb\x05\x8b\xe6\x61\x37\x59\x19\x26\xe0\xc0\x26\x4a\x71\x69\xed\x7f\xc0\x71\x0c\xc2\xbb\x44\xde\xd9\x60\xe8\x99\x35\x42\xa7\xcc\xbb\x44\xab\x42\x41\x11\x95\x82\xde\xbf\x59\x72\x10\xb7\x18\xdf\xa1\x3b\x10\x0b\x10\xe8\xea\x76\x34\x30\x1a\x85\xfd\x0a\x87\xaa\x56\x43\xc8\xa3\x38\x33\x7a\x57\x8f\x90\xa2\xd7\x2a\x4c\x60\x01\x42\x2c\x4b\x0d\x84\x3c\xc8\x30\x49\xb5\x04\x7e\x84\xf4\x57\xa8\x25\x06\x13\xf2\xd1\x33\x42\x79\x89\x9e\x92\x10\xa8\x84\x36\xf4\x3f\x46\x6f\xd7\x88\x73\x61\xf0\xb4\x8f\x97\x41\xc0\x38\x50\xc9\xe6\x22\x84\x01\x13\x71\x50\x82\xc8\x40\xab\x38\xf0\x0b\x10\x92\x30\xaa\x55\x4f\x07\xc3\xc1\x50\xef\x9a\x3d\x2f\x61\x52\xfb\xe4\xa5\x2c\xc4\xa9\xf9\xc3\x2c\x4f\xb0\x84\x5b\xac\x12\xbd\x15\x2c\x4e\x8b\x45\x8e\x55\x22\xd7\xbc\x05\x8b\xd3\x20\x02\x9e\xb2\x65\xb0\xb2\xee\xe7\x81\x44\x79\x90\x30\x36\x93\xc1\x8a\x0b\xb6\x20\x11\x88\xdc\x76\x2c\x06\x9b\x45\x84\xbc\x08\x64\x28\x08\x57\xa5\x85\x6f\x05\xd1\x37\x86\x28\x7c\x40\x05\x7e\x06\x54\xa1\x29\x13\xa8\x79\x0e\x9a\x0a\x96\x21\xeb\x98\xe7\x6b\x54\x85\xe3\x75\x54\x94\x6b\xd7\x06\xce\xab\x97\xc6\x96\x3c\xe3\x20\x0c\xf0\x28\xd2\x56\x70\x26\x55\x21\x7e\xc3\xd8\xec\x06\xd3\x28\x05\x61\xe3\x0b\x90\x9c\x69\xba\xb5\x33\x79\xb9\x9e\x3b\xb4\x6b\x86\x60\x01\x54\xc9\x3e\xfe\xff\x06\x0a\xa9\x04\x90\xd1\x44\x29\x29\xef\x64\x87\x5b\xaf\xb5\x64\x27\xaf\x62\x50\x46\x58\x3e\xe5\x90\x0d\x7f\x36\x1c\x36\x96\x10\xf2\x9e\x09\x98\x6a\xc4\xef\x82\x5a\x2f\x68\xd8\x51\xd1\x61\x7f\x6d\x12\x44\x59\x04\x7b\xf1\x63\x14\x3b\xf1\xf3\x86\x45\xd0\x95\x1e\x2d\x7b\x1c\x76\x5c\x2b\xba\x91\x23\x41\x2c\x48\xb8\x1f\x3f\x95\x6e\x27\x8a\xee\x0a\xe1\xae\x2c\x95\xe2\x6d\x44\x71\x2c\x70\x06\x0a\x44\xf3\x8c\x06\x45\x1c\x2b\x05\xc2\x58\xfc\xf7\xfd\xd0\xbf\xc0\xfe\x74\xbc\x7a\x99\xfb\xf5\xf7\x79\xee\x9f\xd7\x7f\xbc\xc8\xfd\xfb\x97\x17\x78\x32\x76\x56\xaa\xef\xd3\xb3\xfc\x99\x65\x43\xe1\xe5\x92\x9b\xfa\x29\x95\x20\x34\x6e\xee\x56\xd5\xf5\x4e\xe1\x70\x36\xba\x6e\x6e\x13\x63\xd7\xfb\x39\x88\x65\xfb\x95\x8d\x0f\x1a\x1a\x1b\xec\xb7\x46\x47\xfd\x0a\xf0\xa2\x68\x6f\x0f\x81\x57\x02\xb0\xaa\x23\xe0\x90\x77\xaf\x8f\x2e\xe5\xfb\x25\xc9\xe9\x21\x99\xd8\x9a\x27\xc1\x8a\x44\xbd\x1e\x1b\x9d\x2c\xb8\x22\x0a\x4d\x96\x88\x44\x4f\xd2\xa5\x43\xa6\x67\xa2\x1c\xa5\xa0\x1c\x82\xab\x40\x2a\xdc\xff\x79\x32\x4a\xe6\x45\xfe\xba\x98\xd3\xf6\xef\x57\x8b\x8d\x66\xb7\x4a\xdc\x8b\x24\x83\x7b\x1c\x8e\x5c\x3b\x0e\x54\x91\x0c\xe8\xc1\x18\x30\xd5\x68\x0f\x0a\xba\x16\xa3\x0e\x14\x6c\x09\x92\x7d\x0b\x91\x56\x3e\x46\x32\x69\xe1\xff\x2c\x4c\x76\x71\xd4\xda\xe2\x3c\x19\x4e\x65\x11\x0a\x67\x3d\xbb\x9c\xde\x9c\xed\x68\x74\x3e\x6d\x19\xaa\x27\xb6\x08\xa6\x84\x12\x6d\xa9\x35\x8b\x55\x48\x16\x87\x55\xff\xc3\x26\xef\x20\x5c\x33\xb3\x1e\x77\x4b\x1d\x24\x80\x0b\x90\x7a\x28\x40\x18\x95\x8b\x83\xb5\xbc\x80\xf7\x73\x22\x20\x72\xb8\x2c\xfa\xa7\x93\x06\x8d\x7a\x70\xe7\x20\x14\x69\x70\xe2\x85\x26\xfb\xa3\x07\xac\x9a\x5c\xed\xe8\xd2\xbc\x29\x13\x99\xd1\xf0\x22\xac\xc0\x57\x24\x03\x57\xe0\xd1\x8f\x99\x5f\x75\x72\x45\x85\x89\xae\xac\x01\x24\xb7\x6e\x4b\xcf\xb6\x1b\x37\x55\x9d\x8e\x85\xc0\x4b\x17\x9b\x28\xc8\x9a\xf2\x9b\xf6\xda\x37\xb7\xdd\xb4\x1b\x73\x76\xab\x59\x24\xea\xc3\xc8\x51\x7b\x66\xd7\xe6\xd1\x75\xbb\xc1\xe5\xbe\x63\x72\x23\x39\xab\xc0\xd2\xa2\x03\xf7\x88\x5d\xce\x65\x84\xfe\x0e\x34\x36\x3f\x3a\xbc\xd8\xee\x36\xf6\x3f\x0e\xfd\x8b\xf1\x4f\xdf\xff\x72\xe9\xd7\x7f\xfc\xf0\xe3\x2e\x5f\xde\x58\xc1\xea\x7a\x63\x6a\xc8\xc3\x67\x7b\x09\xd5\x74\xd2\x6a\xfb\x9c\x47\x47\x4f\xaa\x3f\x8b\x33\x9c\xa4\xda\x78\xfc\x8d\x06\xc7\xe1\x0c\xc7\x46\x29\x26\x2a\x99\x4f\x06\x21\xcb\x82\x64\xc9\x41\xc8\x10\xa7\x50\x7c\x72\x8c\x65\x10\x61\x85\x27\x58\x42\x00\x54\x11\xb5\x74\x7f\xaa\x2a\x4a\x74\xaf\x3a\x66\xde\x01\xb7\x8a\xe9\xa5\x2f\xaf\x86\x7d\xb6\x71\xfa\x6f\x8a\x85\xb9\xbd\xff\x43\xa9\xd8\xec\x53\x1c\x3b\x09\x55\x10\x3b\x1d\x82\x73\xfd\x84\xaa\x9f\xcf\x77\xa5\x7a\x05\xdf\x7a\xf8\xfa\x07\xdc\x63\x9c\xfd\x57\x89\xfe\x49\x73\xfc\x15\xcb\x38\x93\x3d\x5b\x16\x4b\xb1\x25\xe3\x51\xb9\x65\x65\xfe\xb7\x6c\x3e\x5c\x36\x7f\x7b\x2c\xfb\x3f\x96\x5f\x5e\x0e\xd7\x83\xc8\xe6\xfc\xd3\x36\x86\x98\xff\xcf\x61\x37\xf9\xd6\xb3\x90\x35\xcc\x34\xa7\xa1\x7c\x77\x5b\xd0\x03\xd7\x1e\xfa\x5a\x50\x5b\x0a\x51\x4f\xf0\x0a\x61\x73\x62\x3b\xc9\xff\x09\x00\x00\xff\xff\x92\x9d\xcc\x5c\xfd\x1c\x00\x00")

func docsSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_docsSwaggerJson,
		"docs/swagger.json",
	)
}

func docsSwaggerJson() (*asset, error) {
	bytes, err := docsSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/swagger.json", size: 7421, mode: os.FileMode(420), modTime: time.Unix(1516235238, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/service.json": schemaServiceJson,
	"schema/stack.json": schemaStackJson,
	"docs/swagger.json": docsSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"docs": &bintree{nil, map[string]*bintree{
		"swagger.json": &bintree{docsSwaggerJson, map[string]*bintree{}},
	}},
	"schema": &bintree{nil, map[string]*bintree{
		"service.json": &bintree{schemaServiceJson, map[string]*bintree{}},
		"stack.json": &bintree{schemaStackJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

