// Code generated by go-bindata.
// sources:
// schema/service.json
// schema/stack.json
// docs/swagger.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaServiceJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x31\x4f\x03\x31\x0c\x85\xf7\xfb\x15\x96\xd5\x8d\x86\x54\x82\x85\xfc\x06\x06\xf6\xea\xa8\xac\xc6\xbd\x0b\xf4\x92\xe0\x98\x01\x50\xff\x3b\x4a\x52\x55\xb7\x77\xc9\xf0\xf2\xbd\xf7\x6c\xff\x0d\x00\xb8\x29\xc7\x99\x17\x42\x07\x38\xab\x66\x67\xed\x47\x49\xd1\x74\xf5\x31\xc9\x64\xbd\xd0\x49\xcd\xee\xd9\x5e\xc9\x6d\xb5\x65\x49\x99\x45\x03\x17\x74\x50\x83\x00\xb0\x28\x1d\x3f\x0f\xc1\xdf\x14\x00\xd4\x9f\xcc\x35\xbb\xa8\x84\x38\x35\x6f\xd3\x33\xa9\xb2\xc4\xfa\xf5\xbe\x27\xf3\x3b\xd6\x67\x67\x5e\x0e\xe3\xc3\x06\x1b\x74\xe9\x2c\x46\x5a\xf8\xee\xc4\x1b\xb5\x84\xf8\xca\x71\xd2\x19\x1d\x3c\xf5\x9e\xe1\xda\x85\xc2\x5f\xdf\x41\xb8\xce\xbf\xef\xb5\xdb\xd5\x52\x63\x63\xc8\xfb\xa0\x21\x45\x3a\xbf\xad\x2f\x70\xa2\x73\xe1\xe1\x32\xfc\x07\x00\x00\xff\xff\x67\xf5\x00\x07\x53\x01\x00\x00")

func schemaServiceJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaServiceJson,
		"schema/service.json",
	)
}

func schemaServiceJson() (*asset, error) {
	bytes, err := schemaServiceJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/service.json", size: 339, mode: os.FileMode(420), modTime: time.Unix(1516413875, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaStackJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xc1\x4a\xc4\x30\x10\x86\xef\x7d\x8a\x61\xd8\x83\xba\xc6\x2e\xe8\xc5\x5c\x7c\x01\x11\xc1\xe3\x52\x61\xd8\xce\xb6\x23\xdb\x34\x4e\x46\x41\x65\xdf\x5d\x92\x14\xed\x2d\xf3\xcd\xff\xe5\x4f\x7e\x1a\x00\xdc\xa4\xc3\xc8\x13\xa1\x07\x1c\xcd\xa2\x6f\xdb\xb7\x34\x07\x57\xe9\xcd\xac\x43\xdb\x2b\x1d\xcd\xed\xee\xda\x25\x79\x9d\xb5\xa8\x73\x64\x35\xe1\x84\x1e\xf2\x45\x00\xf8\x44\x13\xff\x4d\x00\x68\x5f\x31\xcf\x98\x4c\x25\x0c\xc5\x2b\x3c\x92\x19\x6b\xc8\xab\xd7\x3d\xb9\xef\x6e\x7b\xf1\xe0\x5d\x3e\xed\xdc\x7d\xb7\xbd\xbc\xda\xfc\x67\x27\x09\x8f\x1c\x06\x1b\xd1\xc3\x6d\x81\xe7\xba\xc3\x17\xd6\x4f\x39\xac\xfa\x57\x8d\x12\x8c\x07\x56\xac\x42\xb3\x48\xa8\xfc\xfe\x21\xca\x3d\x7a\xd8\xd7\xd7\x76\x85\x53\xdf\x8b\xc9\x1c\xe8\xf4\xbc\xfe\xd6\x91\x4e\x89\x9b\x73\xf3\x1b\x00\x00\xff\xff\x3a\xee\x42\x2c\x28\x01\x00\x00")

func schemaStackJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaStackJson,
		"schema/stack.json",
	)
}

func schemaStackJson() (*asset, error) {
	bytes, err := schemaStackJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/stack.json", size: 296, mode: os.FileMode(420), modTime: time.Unix(1516408820, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docsSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\x20\xb4\x3e\xec\x4f\x6d\x39\x69\x30\x34\x7e\xd9\x82\xa6\x58\x02\x6c\x41\xb0\x74\x7b\xc9\xbc\x80\x96\xce\x12\x1b\x89\x64\x48\xda\x8d\x6b\xe8\xbb\x0f\xa4\xfe\x98\x94\x64\x47\x32\xec\x36\x18\xfa\x26\x91\x77\xc7\xbb\x1f\x7f\x3c\xde\x49\xab\x23\x84\xbc\x80\x51\x39\x4f\x41\x7a\x63\x74\x77\x84\x10\x42\x1e\xe6\x3c\x21\x01\x56\x84\x51\xff\xa3\x64\xd4\x3b\x42\x68\xf2\x5a\xcb\x72\xc1\xc2\x79\xd0\x4d\x56\x06\x31\x38\x66\x63\xa5\xb8\xb4\xe6\x3f\xe1\x28\x02\xe1\x8d\x91\x77\x32\x1c\x79\x66\x8c\xd0\x19\xf3\xc6\x68\x95\x2b\x28\xa2\x12\xd0\xf3\x97\x4b\x0e\xe2\x06\xe3\x5b\x74\x0b\x62\x01\x02\x9d\xdf\x5c\x0d\x8d\x46\xee\xbf\xc2\x81\xaa\xd4\x10\xf2\x28\x4e\x8d\xde\xf9\x13\x24\xe8\xbd\x0a\x62\x58\x80\x10\xcb\x42\x03\x21\x0f\x52\x4c\x12\x2d\x81\x9f\x20\xf9\x15\x2a\x89\xe1\x94\x7c\xf6\x8c\x50\x56\x58\x4f\x48\x00\x54\x42\x9b\xf5\x3f\xae\x3e\xac\x2d\xce\x85\xb1\xa7\x63\x1c\xfb\x3e\xe3\x40\x25\x9b\x8b\x00\x86\x4c\x44\x7e\x61\x44\xfa\x5a\xc5\x31\xbf\x00\x21\x09\xa3\x5a\xf5\x78\x38\x1a\x8e\xf4\xac\x99\xf3\x62\x26\x75\x4c\x5e\xc2\x02\x9c\x98\x17\x33\x3c\xc5\x12\x6e\xb0\x8a\xf5\x94\xbf\x38\xce\x07\x39\x56\xb1\x5c\xe3\xe6\x2f\x8e\xfd\x10\x78\xc2\x96\xfe\xca\xda\x9f\x7b\x12\x66\x7e\xcc\xd8\x83\xf4\x57\x5c\xb0\x05\x09\x41\x64\x76\x60\x11\xd8\x28\x22\xe4\x85\x20\x03\x41\xb8\x2a\x3c\xfc\x20\x88\xde\x31\x44\xe1\x13\xca\xed\xa7\x40\x15\x9a\x31\x81\xea\xeb\xa0\x99\x60\x29\xb2\x96\x79\xbd\xb6\xaa\x70\xb4\x66\x45\x31\x76\x61\xcc\x79\xd5\xd0\xc4\x92\x67\x1c\x84\x31\x7c\x15\x6a\x2f\x38\x93\x2a\x17\xbf\x64\xec\xe1\x12\xd3\x30\x01\x61\xdb\x17\x20\x39\xd3\x70\xeb\x60\xb2\x62\x3c\x73\x60\xd7\x08\xc1\x02\xa8\x92\x7d\xe2\xff\x0d\x14\x52\x31\x20\xa3\x89\x12\x52\xec\xc9\x96\xb0\xde\x6b\xc9\x4e\x51\x45\xa0\x8c\xb0\x7c\x2e\x20\xdb\xfc\xc9\x68\x54\x1b\x42\xc8\x7b\x25\x60\xa6\x2d\x7e\xe7\x57\x7a\x7e\xcd\x8f\x12\x0e\xfb\xa9\x09\x10\x65\x21\xec\x84\x8f\x51\xec\x84\xcf\x35\x0b\xa1\x2b\x3c\x5a\xf6\x30\xe8\xb8\x5e\x74\x03\x47\x82\x58\x90\x60\x37\x7c\x4a\xdd\x4e\x10\xdd\xe6\xc2\x5d\x51\x2a\xc4\xdb\x80\xe2\x58\xe0\x14\x14\x88\xfa\x1a\x35\x88\x38\x56\x0a\x84\xf1\xf8\xdf\xbb\xd1\xe0\x0c\x0f\x66\x93\xd5\xdb\x6c\x50\x3d\x9f\x66\x83\xd3\xea\xe5\x4d\x36\xb8\x7b\x7b\x86\xa7\x13\x67\xa4\x7c\x3e\x3e\xc9\x5e\x59\x3e\xe4\x51\x2e\xb9\xc9\x9f\x52\x09\x42\xa3\xfa\x6c\x99\x5d\x6f\x15\x0e\x1e\xae\x2e\xea\xd3\xc4\xf8\xf5\x38\x07\xb1\x6c\xdf\xb2\xc9\x5e\xa9\xd1\x40\xbf\x95\x1d\xd5\x2d\xc0\xf3\xa4\xbd\x99\x02\xef\x04\x60\x55\x31\xe0\x1f\xfa\x27\x3c\xce\x41\xaa\x31\x2a\x16\xca\xe7\x8b\xd1\x7d\x52\x43\x7b\x56\xc8\xf7\x3b\x43\xc7\xfb\x04\x6a\xe3\x31\xf2\x57\x24\xec\x75\x17\xe9\xb3\x84\x4b\x1c\xd1\x74\x89\x48\xf8\x2c\x5c\x9a\x51\x3d\xcf\xd1\x41\xf2\xcd\xbe\x49\xf5\x17\x0f\xb7\x92\x6a\xaf\x3c\x9a\xbf\x00\x68\xb6\xd3\xc8\x97\x0a\xf7\xbf\xd8\x8d\x92\xa9\x65\xfe\xcf\xa4\x6a\x22\xa7\xfd\xdf\xed\x16\x33\x9a\xdd\xee\xb0\x5e\x20\x19\xbb\x87\xc1\xc8\xf5\x63\x4f\xb9\xdc\x18\xdd\x1b\x02\x26\x51\xef\x00\x41\xd7\x3c\xdd\x01\x82\x0d\x24\xd9\x35\x47\x6b\xe5\x43\x1c\x26\x2d\xfc\xd5\x68\xb2\x0d\xa3\xd6\xe2\xf0\x59\x3a\x15\x49\x28\x78\xe8\x59\x1f\xf6\xc6\x6c\x4b\x89\xf8\xd5\xd2\x50\xd1\x07\xfb\x09\x56\xe0\xe0\xd4\x39\x1d\xe5\x9a\xa8\x6c\xa8\x9f\x41\xed\xef\x42\xac\x23\x6e\x85\xb8\x69\xa3\x0e\x02\x5b\xc3\x9f\x2d\xb0\x55\x9f\x08\x42\x98\x11\x4a\xb4\xa3\x56\xf3\x5f\x6e\x80\x05\x61\x59\x70\xb3\xe9\x47\x08\xd6\x84\x5a\x7f\x5f\x29\x74\x90\x00\x2e\x40\xea\x2e\x14\xe1\xb2\x78\x18\xae\xe5\x05\x3c\xce\x89\x80\xd0\x01\x33\x2f\xd8\x8f\x6a\x28\x7a\x5c\x68\x14\x15\xa9\x61\xe2\x05\x26\x69\x86\xf7\x58\xd5\xb1\xda\xd2\x16\x78\x33\x26\x52\xa3\xe1\xe9\x4a\x67\xa0\x48\x0a\xae\xc0\xd3\x20\x62\x83\xb2\x75\xc8\x13\x73\x78\x6e\x75\xbc\x99\xb5\x5b\x31\x93\xaa\xb1\x53\xe5\xea\x58\x08\xbc\x74\x6d\x13\x05\x69\x5d\xbe\xe9\xaf\xbd\x73\x9b\x5d\xbb\x34\x6b\xb7\xba\x45\xc2\x3e\x88\x1c\xb4\x49\x73\x7d\xbe\xba\x68\x77\xb8\x98\x77\x5c\xae\x1d\xce\x92\x58\x5a\x74\xe8\x2e\xb1\x2d\xb8\x94\xd0\xdf\x81\x46\xe6\x2b\xd7\x9b\xcd\x61\xe3\xc1\xe7\xd1\xe0\x6c\xf2\xd3\xf7\xbf\x8c\x07\xd5\xcb\x0f\x3f\x6e\x8b\xe5\xda\x22\xab\x1b\x8d\x49\xbd\xf7\x2f\x76\x13\xca\x76\xb8\xd5\xf7\xb9\x69\x00\x0e\x7b\xa8\xf2\x26\xc3\x3d\x54\x8d\x9a\xc9\x68\x70\x1c\x3c\xe0\xc8\x28\x45\x44\xc5\xf3\xe9\x30\x60\xa9\x1f\x2f\x39\x08\x19\xe0\x04\xf2\x47\x8e\xb1\xf4\x43\xac\xf0\x14\x4b\xf0\x81\x2a\xa2\x96\xee\xb7\xd1\xfc\x66\xeb\x95\xc7\xcc\xf5\xe9\x66\x31\x3d\xf4\x6c\x0e\xbb\xee\x95\xc3\xae\x3b\x10\xdf\x78\xf2\x85\x69\xdf\xca\x8d\xdb\x66\x2d\xe2\x38\x42\xa8\x82\xc8\xb9\xce\x1c\x6a\x10\xaa\x7e\x3e\xfd\xb2\x5b\xfe\x8e\xa5\x9c\xc9\x9e\x37\x98\xa5\xd8\x42\x00\x54\x4c\x59\x44\x78\xc1\x17\xd4\x8b\x4d\x42\x9b\xf2\xcf\xb7\xdc\xd9\x3f\x77\x5a\x2e\xac\x7f\x02\xed\x7e\x42\x37\x2f\xde\x28\x2d\x0f\x75\x86\xab\xba\xb4\x59\x0e\xb7\x55\xa5\xe6\xff\x20\x76\x0f\xdf\xba\x34\xb6\x6a\xdb\x7a\x4f\x91\x6d\xbf\x25\x7a\xd8\xb5\x5b\xa7\x16\xab\x2d\x89\xa8\xa7\xf1\xd2\x42\xb3\x80\x3f\xca\xfe\x0b\x00\x00\xff\xff\xb7\xad\xac\x53\x7d\x1d\x00\x00")

func docsSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_docsSwaggerJson,
		"docs/swagger.json",
	)
}

func docsSwaggerJson() (*asset, error) {
	bytes, err := docsSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/swagger.json", size: 7549, mode: os.FileMode(420), modTime: time.Unix(1516840565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/service.json": schemaServiceJson,
	"schema/stack.json": schemaStackJson,
	"docs/swagger.json": docsSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"docs": &bintree{nil, map[string]*bintree{
		"swagger.json": &bintree{docsSwaggerJson, map[string]*bintree{}},
	}},
	"schema": &bintree{nil, map[string]*bintree{
		"service.json": &bintree{schemaServiceJson, map[string]*bintree{}},
		"stack.json": &bintree{schemaStackJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

