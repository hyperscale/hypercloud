// Code generated by go-bindata.
// sources:
// static/config/docker-compose.yml
// static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticConfigDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xdf\x8f\xda\x38\x10\x7e\xe7\xaf\xb0\x50\xa5\x7d\x69\xf8\x71\xcb\x4a\x2b\x4b\x79\xa0\x2c\xed\x21\xb1\x70\x6a\xb7\xcf\xd1\x10\x0f\x60\xe1\xd8\x96\x3d\x81\x45\xa7\xfb\xdf\x4f\x4e\x80\x24\x10\x6d\xb5\x5b\xf5\x25\xd2\x7c\xf3\xcd\x78\x32\xf3\x8d\xbd\x47\xe7\xa5\xd1\x9c\x75\xef\x7b\xa3\x6e\xc7\xa3\xdb\xcb\x14\x3d\xef\x30\x46\x0e\x70\x2d\x77\x89\xd4\x92\x82\xcd\x98\xcc\x60\x83\xfc\xec\xe0\xc3\xde\x43\x01\xa7\x26\xcb\x40\x8b\x92\xc3\x58\xc4\xba\x9e\x8c\xc3\xd4\xe8\xb5\xdc\x74\x2b\x34\x8a\xc0\xca\x86\x2d\x70\x0d\xb9\x22\xd4\xe4\x8e\xd6\x48\x4d\x3e\xde\x12\xd9\xcf\xe1\xe3\x1b\xcc\x82\xf2\x4f\x49\x59\x40\x86\x3c\x50\xd8\x58\x08\x87\xde\x73\xfe\x38\xf8\x35\xdb\x57\xf4\xd1\xe8\x9e\xbd\xcc\x7f\x34\x6b\x4b\x33\xbc\x01\x7a\x55\xa6\xf8\xb6\xa8\x82\x11\xe0\xc9\x16\x94\x42\xbd\x69\x49\xd0\x70\x5f\xa7\x6b\x39\x2f\x03\xa9\xe2\x4f\xd3\xe7\xf1\x6c\x7e\xeb\x0d\x7d\x85\x0d\xc6\xa7\x09\xf4\x03\xd8\x87\x34\x35\xb9\xa6\x5b\xf6\x52\xff\x6d\x3c\x7d\xcf\x55\x08\xc8\x5b\x6a\x33\xfa\x09\xc3\xe4\xe2\x35\x28\xdf\xf4\x0b\x93\xee\xd0\xb5\x40\x3d\x7f\x00\x97\x65\x46\xb4\xf1\x7b\xf8\x6a\x8d\x47\xb1\x3a\x9e\x26\x7b\x7b\xf0\x89\x28\x4c\x06\x52\xc7\x9f\x9e\x96\xcf\xe3\xd9\xa2\x8d\x71\x00\x4a\xb7\x0d\x87\x32\x9b\x39\xee\x51\xc5\x4f\xd3\x2f\x3f\xbf\x35\x5c\xa9\xd1\x3e\x57\x2d\x50\x0f\xb5\x28\x94\x15\x97\x36\x7f\x7c\x18\x0c\xda\x78\xd6\xe1\x5a\xbe\x9e\x3b\x5b\x32\x34\xd2\xc1\xb8\x9d\xaf\x94\xbd\x3d\x5a\x74\x16\xc0\x17\x88\x40\xab\xcc\xf1\xec\x55\xb0\x42\x75\xe1\x16\x6b\xd1\xbb\xf0\x7b\x52\x13\x3a\x0d\x8a\xb3\xbb\xd0\x93\xbb\x13\xcd\xa1\x27\x70\x94\x58\xa3\x64\x7a\xac\x07\x6b\x21\xa9\xd8\x4c\xa3\xa3\x35\x48\x95\x3b\x3c\x1f\x8a\x5a\xf8\xc4\xe8\xaa\xac\xf2\x1f\x3a\xd5\xd2\xbe\xb9\xaf\x6d\x19\xea\xcb\x7e\x9d\x36\x18\x7b\xa3\xf2\x0c\x6b\x9d\xa0\xa3\x45\xce\x56\x52\x8b\x4b\xcd\xde\xe4\x2e\x45\xce\xfa\x7b\x70\x7d\x97\xeb\xfe\x59\x31\x26\xdd\x5d\x48\x04\x6e\x83\xf4\x06\xc9\x1a\x47\xf5\x73\x4e\xfc\xc7\xc1\x25\x85\xcd\x57\x4a\xfa\x2d\x8a\x06\x1a\x24\xc9\xd9\xd6\x78\xba\x89\x1d\x8d\xee\xdb\x82\xeb\xf0\x55\xf4\xed\x95\xf6\xa7\x34\xf6\xbe\xf5\x7e\x9f\x22\xcb\x9f\xda\x28\xb3\x02\xf5\x9b\x22\x2d\x46\x5b\x8b\x53\x32\x93\x54\xb3\x19\xcb\x30\x33\xee\xc8\xd9\x70\x30\x78\xbe\xc0\x0e\xc3\x8b\x02\x41\xc8\xad\xe4\x87\x0b\xf7\xfd\x8b\x50\xfe\xaf\x82\x90\xc6\x57\x83\x84\xd7\x04\x88\x30\xb3\xe4\x39\xfb\xab\xd2\xc7\x41\x6a\x61\x0e\x9c\xdd\x3f\x0e\xce\x6c\xab\x20\xc5\x0c\x35\x35\x8e\xf3\xe4\x20\xbc\x1c\xf5\x7a\x23\x76\xa7\x8d\xc0\x9e\x33\x0a\x59\x1c\xb3\x0c\x34\x6c\xd0\x9d\x1b\x94\x5b\x01\x84\x49\xf9\xe2\x55\x71\x16\x5c\xb8\xf8\x95\xf4\x19\x67\xc3\xeb\xa2\x87\x03\x1f\x36\xf6\xa4\x99\xfa\xc2\xd6\xf6\xee\x2c\x44\x06\x1b\xd4\xc4\xa2\xd0\x4e\x74\x2c\x5a\x19\x43\xa1\x50\x1b\xe1\xab\xc5\x94\xe2\x61\xfb\x9a\x96\xa9\x22\x01\x04\xbc\x5f\x1a\xfd\x60\x14\x04\xd4\x7b\xe9\x8c\xae\x77\x20\x62\x93\xe5\xe2\xc7\xcf\x79\x32\x5f\x4e\xc6\xf3\x64\xb2\x5c\x7c\x9d\x7d\x8b\xff\xed\xfa\x9d\xb4\x89\x42\xd8\x63\x62\x74\x52\xe8\xc4\xe5\x96\xba\x3c\xe8\xe4\x73\xb7\x2c\xab\xb4\xfe\xbb\x4e\xf5\x65\xb6\x78\x4a\x66\x8b\x97\xe9\xf7\xaf\xe3\xc9\x34\x46\xda\x0e\xae\x29\x93\xf9\x6c\xba\x78\x69\x23\x35\x15\xed\xd0\x2a\x99\x82\xaf\xda\xf9\x21\x41\xbf\x67\xf0\x6d\x73\xff\x0d\xcd\x7e\x58\x2a\x97\x23\xff\xf0\x2a\xbe\x75\xc5\x74\xea\xce\x0b\x5c\x32\x85\x93\x7b\x74\x9c\x99\x3d\x3a\x05\xc7\x02\x03\x22\x48\xb7\xb0\x52\xc5\x2b\x94\x97\x3d\x68\x4e\xec\x17\xf3\xea\xd4\x14\x5d\xd7\xf2\x29\xfa\x7c\xa8\x32\xe9\x47\xaf\xb8\xff\x03\x00\x00\xff\xff\x38\x30\x44\x96\x02\x0b\x00\x00")

func staticConfigDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_staticConfigDockerComposeYml,
		"static/config/docker-compose.yml",
	)
}

func staticConfigDockerComposeYml() (*asset, error) {
	bytes, err := staticConfigDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/config/docker-compose.yml", size: 2818, mode: os.FileMode(420), modTime: time.Unix(1517530336, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdd\x8e\xdb\x36\x13\xbd\xcf\x53\xcc\x47\x7c\x80\xbc\xc0\x5a\x6a\xfa\x87\x62\x63\x19\xdb\x74\x37\x68\x8a\xb4\x1b\x60\xf3\x02\xb4\x38\xb2\xd9\x50\xa4\x40\x8e\xbc\x71\x8b\xbc\x7b\x41\x52\xf2\xfa\x87\xf2\x7a\xd3\x5c\xd4\x37\xa2\xa4\x33\x67\x66\x0e\x87\x43\xd1\xb3\xff\x09\x53\xd1\xa6\x45\x58\x51\xa3\xe6\x2f\x66\xfe\x02\x8a\xeb\x65\xc9\x50\xb3\xf9\x0b\x00\x80\xd9\x0a\xb9\x88\xc3\x70\xdb\x20\x71\xa8\x56\xdc\x3a\xa4\x92\x75\x54\x4f\x7f\x62\x50\xec\x00\x48\x92\xc2\xf9\xaf\x9b\x16\xed\x7b\xce\xef\xe1\xad\x76\xc4\x95\x42\x3b\x2b\xe2\xab\x47\xe8\x82\x3b\x84\x95\xc5\xba\x64\x45\x20\x39\x70\xa3\x79\x83\x25\x5b\x4b\x7c\x68\x8d\x25\x06\x95\xd1\x84\x9a\x4a\xf6\x20\x05\xad\x4a\x81\x6b\x59\xe1\x34\xdc\x5c\x82\xd4\x92\x24\x57\x53\x57\x71\x85\xe5\xcb\xfd\xa0\x94\xd4\x1f\xc1\xa2\x2a\x99\xac\x8c\x66\xe0\xb3\x2e\x99\x6c\xf8\x12\x8b\x4f\xd3\xf8\x2c\x06\x52\xf3\xb5\xbf\xcd\x65\x65\x0e\x42\x0a\x1c\x11\xb4\x22\x6a\xdd\x55\x51\x74\xba\xfd\xb8\xcc\x2b\xd3\x14\xd7\x95\xb2\x45\x27\xaf\xbf\xc9\x5f\xbe\xcc\xbf\x9d\xb6\x9c\xaa\x55\x51\x29\x3b\xed\x64\xde\x48\x9d\x57\xce\xb1\x18\x80\xa3\x8d\x42\xb7\x42\xa4\x44\x88\x27\xe9\x7d\x5c\xee\xd8\x43\x78\x7c\xa6\x13\x57\x59\xd9\x12\x38\x5b\x7d\xb9\x97\x3f\x1d\x9b\xcf\x8a\xc8\xd4\xd7\x48\xf1\x58\x24\xb3\x85\x11\x9b\x1d\x8f\x42\xae\xa1\x52\xdc\xb9\x92\x35\x5c\xea\xa9\x9f\x43\x2e\x35\x5a\xf6\x08\x3a\x04\x7a\xb6\x23\xc0\x21\x68\x61\xb9\x16\x52\x2f\x13\xb0\x98\x6a\xcb\xf5\x80\x0d\x85\xc7\xd2\x45\xe9\x71\x09\x4f\x85\x90\xeb\x83\x08\xe3\xa3\xd1\xa8\xfb\xea\x1c\xcd\x70\x0c\xcf\x2d\xf2\xb1\x24\x76\xe0\xd6\x3c\xb0\x03\xef\xe3\xcc\x6a\xfa\xc9\x4d\x7f\x04\x53\xd7\x0e\xc9\x8f\xbf\x1b\xf1\x90\x34\xe7\x56\x3c\x01\x4f\x99\x4c\x47\xa7\x2d\xf5\xeb\x67\x80\x93\x34\xfa\x69\x57\xc7\xb3\x71\x56\x44\x0b\x65\xaa\x8f\x67\x06\x34\xab\x8d\x6d\xa0\x41\x5a\x19\x51\xb2\xd6\x38\x62\x20\x45\xc9\xe4\x50\x2a\x67\xf2\x1c\x06\xe2\x69\xa7\x4b\x6b\xba\xf6\x19\x04\x81\x44\xf1\x05\x2a\xa8\x8d\x2d\x99\x30\x7e\xf1\xb0\xf9\x4d\xb8\x82\xa9\x61\x63\x3a\x0b\xbe\x96\x67\x45\xc0\x3d\x93\x5b\xea\xb6\xa3\xbe\x0d\x12\x7e\xea\x73\xed\xdd\x40\xab\x78\x85\x2b\xa3\x04\x6e\x7d\xe7\xa4\x04\x03\x27\xff\xc2\x92\x7d\xff\x03\xeb\x7b\xf3\x60\x50\x3c\x43\x9b\xc4\x32\x3a\x89\xff\xda\x5a\x62\xc3\xa5\x62\xf3\x5b\x7f\xf1\x4f\xe0\x1d\x52\xe6\xe0\x56\x57\x76\xd3\xd2\xbf\x97\x33\xf2\x07\x3d\xfb\xe1\x9e\x9c\x8e\x70\x8d\xd7\xa7\x44\xed\xad\x9e\xaf\xe9\x79\x50\x2f\xe2\x19\x6b\xe9\x0b\x97\x5c\x6d\x0c\x9d\xbd\x56\x82\xb5\x17\xaa\xb5\x66\x69\xd1\x6f\x5f\x3d\xd7\xf0\x00\x94\x31\x2d\x83\xb0\x9f\x95\x4c\x48\xd7\x2a\xbe\xb9\x02\x6d\x34\xbe\x7a\xce\x82\x1c\xf8\xe6\xb3\x62\x3b\x3c\x53\xaf\xf3\xa5\x5d\x74\x44\x46\x83\x90\x8e\x2f\x14\x8a\x90\x99\xd1\x7d\xa7\x1b\x3e\x3a\x5c\xb7\x68\x24\x31\x5f\x79\xcd\x6e\x77\xd9\xee\x6b\xa4\x61\x41\x7a\xda\x5a\xd9\x70\xbb\x61\xf3\xde\x7e\x56\x44\xfa\xaf\x32\x75\x4f\x40\x4e\xad\xd1\x11\xd3\xf1\x0d\x73\xec\x76\xf7\x0b\xc2\xff\x84\xa9\xba\x06\x35\xe5\x5c\x88\xdb\x35\x6a\x7a\x27\x1d\xa1\x46\x3b\xc9\x6e\xee\x7e\xff\x25\xee\x96\xef\x0c\x17\x28\xb2\x4b\x98\x5c\x40\x39\x87\xbf\xf7\x1c\xfa\x4f\x14\xa3\x30\x57\x66\x99\xb0\xb9\x78\xb5\x9f\xd0\x9a\x5b\xf8\x3f\x7a\x47\x0e\x4a\xd0\xf8\x00\xc1\xeb\xbd\xe9\x6c\x85\x93\xac\xd8\x4e\x4d\x11\x41\x9e\xe0\xc8\xbe\x07\xbd\x26\x0d\xe5\x63\x06\x4b\xa4\x5b\x85\x7e\xf8\x7a\xf3\x56\x4c\xb2\x6d\x11\x9c\xe2\x40\xfb\xc6\xef\x40\x27\x68\xb6\xc0\x24\x4d\x6c\x29\x6f\x24\x2a\x71\x8a\x24\xc2\x92\x0c\xa1\xf1\x3c\x49\x10\x50\x49\xfb\xed\xa2\x3d\x61\x3d\x60\x8e\xa6\x63\x47\xca\xdc\x62\x63\xd6\xf8\x33\x91\x95\x8b\x8e\x70\x92\x0d\x4b\xea\xd8\x2a\xce\x4d\xa2\x66\x1a\x74\x8e\x2f\xd1\x97\x4a\x3f\x4c\x54\xcc\x10\x7a\x60\x81\x12\x7e\xbb\xbf\xfb\x23\x6f\xfd\xe1\x66\x30\xca\x05\x27\x7e\xe8\xf5\xa8\xd8\x82\x7d\x76\x19\x79\x52\x68\x59\xc3\x24\xbc\xcc\xc3\x81\xab\x2c\x4b\xc8\x6a\xa9\xa5\x5b\xf9\xa4\x12\x51\x85\xe4\x06\xb1\xf2\xd0\xff\xf2\xbe\xfd\x41\x09\x99\x6f\x80\xd9\xab\xb4\xd5\x17\x09\x39\xfc\x8a\xe2\xfa\xc3\xdd\xcd\x1d\x58\x14\xd2\x62\x45\x40\x06\x1a\xae\xf9\x12\x2d\x74\x56\x1d\xd9\x7c\x3e\x2f\x57\xb4\xd6\xd8\xff\x68\xaa\x83\xaf\x10\x63\x22\xc1\xbd\xbb\xb1\xb2\x8d\xab\x37\x51\x87\xb1\xdf\xfb\x32\x8c\xc5\x91\x2e\xc2\xa8\x57\x6b\xc3\xf5\x06\x6b\xde\x29\x9a\x3c\x59\x76\xf7\x81\x3b\x6c\x25\xc9\x2c\x77\xf5\x71\x48\x29\x71\x2e\x61\x4f\xa8\x67\xcc\x4b\xf8\xb8\xce\x12\x5e\x6b\xa4\x6a\xb5\xdb\x40\xb3\xcb\x91\x59\x8f\x5f\xdb\x57\x90\xbd\xbf\xbb\xff\x90\x5d\x26\x31\xfe\x3c\x79\x15\xda\xb3\x17\xf8\x86\x13\x9f\xec\x6b\x7e\x71\x6c\xf7\xf9\x22\xaf\xfc\xc9\x75\x62\x91\x3b\xa3\xd3\x92\xef\xaa\x89\xd6\xf6\xd8\x84\x06\x70\x7e\xad\x1c\x58\xef\x55\xcb\xee\xcb\xc3\xf3\x73\x3c\x34\xcf\x8a\xf8\x47\xcc\x3f\x01\x00\x00\xff\xff\x1e\x1d\xdb\x25\x99\x11\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 4505, mode: os.FileMode(420), modTime: time.Unix(1517270175, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/config/docker-compose.yml": staticConfigDockerComposeYml,
	"static/index.html": staticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"config": &bintree{nil, map[string]*bintree{
			"docker-compose.yml": &bintree{staticConfigDockerComposeYml, map[string]*bintree{}},
		}},
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

