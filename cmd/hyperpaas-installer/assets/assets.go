// Code generated by go-bindata.
// sources:
// static/config/docker-compose.yml
// static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticConfigDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\xdf\x6f\xe2\x38\x10\x7e\xe7\xaf\xb0\xa2\x95\x78\x59\x42\xba\x6d\xa5\xca\x52\x1e\x58\xca\x76\x91\x28\xac\x80\xbd\xd3\x3d\x45\x26\x1e\xc0\xaa\x63\x5b\xb6\x03\x45\xa7\xfb\xdf\x4f\xce\x2f\x12\x92\x6b\xaf\xdd\xeb\xdb\xbd\x44\xf2\xcc\x37\xe3\xc9\xcc\xf7\xd9\x3e\x80\x36\x4c\x0a\x8c\xbc\x6b\xff\xc6\xeb\x19\xd0\x07\x16\x83\xc1\x3d\x84\xac\x26\xb0\x65\x4f\x11\x13\xcc\xba\x35\x42\x2c\x21\x3b\xc0\xa5\x03\x5f\xf9\xb7\x99\x39\x96\x49\x42\x04\xcd\x31\x08\x0d\x90\x67\xac\xd4\x10\x4b\xb1\x65\x3b\xef\x6c\x1d\x0c\x88\x62\x8d\x35\x85\x2d\x49\xb9\x05\x61\xf5\x49\x49\x26\xac\x09\xf7\xd6\xaa\xcf\xee\x63\x1a\xc8\x0c\xf2\x23\x87\xcc\x49\x02\xd8\x41\xd0\x88\x52\x0d\xc6\x60\x7c\x17\xbc\x8e\x36\x67\xf8\xcd\xcd\x35\x5a\xcf\x56\xcd\xda\xe2\x04\x5a\x06\xff\x9c\x29\x6c\x17\x95\x21\x9c\x79\xbc\x27\x9c\x83\xd8\x75\x24\x68\xb8\x2f\xd3\x75\xec\x97\x10\xc6\xc3\x4f\x93\xc7\xd1\x74\xd6\xf6\xba\xbe\x92\x1d\x84\xc5\x04\x86\xce\x38\x24\x71\x2c\x53\x61\xdb\xe8\x85\xf8\x2e\x8d\x5d\xa6\xdc\x05\xa4\x1d\xb5\x49\x71\x0f\x6e\x72\xe1\x96\x70\xd3\xf4\x53\x19\x3f\x81\xee\x30\xf9\xe6\x48\x74\x92\x48\xda\x85\xf7\xe1\x59\x49\x03\x74\x73\x2a\x26\xdb\xde\xb8\x00\x52\x99\x10\x26\xc2\x4f\xf7\x8b\xc7\xd1\x74\xde\x85\x38\x12\x1b\xef\x1b\x0e\x2e\x77\x33\x38\x00\x0f\xef\x27\x5f\x7f\x3e\x34\x5c\xb1\x14\x26\xe5\x1d\x26\x1f\x04\xcd\x98\x15\xe6\x6b\x7c\x77\x1b\x04\x5d\x38\xa5\x61\xcb\x9e\xcb\xce\xe6\x08\x01\xf6\x28\xf5\x93\x39\x33\x7b\x7f\x52\xa0\x15\x21\x26\xb3\x50\x50\x5c\x9e\x4a\x2f\x27\x1b\xe0\x15\x36\x93\x85\x5f\xe1\x7d\x26\x2c\x68\x41\x38\x46\x7d\xd7\x93\x7e\x01\xd3\x60\x2c\xd1\x36\x52\x92\xb3\xf8\x54\x0f\x16\x94\xd9\x4c\x99\x52\x0c\xb6\x84\xf1\x54\x43\xb9\x29\x08\x6a\x22\x29\xce\x65\xe5\xff\xd0\x3b\x8b\xf6\x45\xbd\x76\x65\xa8\x8b\xfd\x32\xad\x5b\x1c\x24\x4f\x13\xa8\x75\xc2\x9e\x14\x60\xb4\x61\x82\x56\x35\x1b\x99\xea\x18\x30\x1a\x1e\x88\x1e\xea\x54\x0c\x4b\xc6\xc8\xf8\xa9\x02\x59\xa2\x77\x60\x5f\x00\x29\xa9\x6d\x7d\x9f\x02\x7f\x17\x54\x29\x54\xba\xe1\xcc\xec\x81\x36\xac\x8e\x92\x18\xed\xa5\xb1\xad\xd8\x9b\x9b\xeb\xae\xe0\xba\xf9\x22\xba\x7d\xa4\x7d\x14\xc7\xde\x26\xef\xb7\x31\x32\xff\xa9\x1d\x97\x1b\xc2\x7f\x91\xa4\xd9\x68\x6b\x71\x9c\x25\xcc\xd6\xd6\x08\x25\x90\x48\x7d\xc2\xe8\x2a\x08\x1e\x2b\xb3\x06\x77\xa3\x10\x47\xe4\x4e\xf0\x6d\x85\x7d\xbb\x10\xf2\xff\xe5\xc4\xa5\x31\xe7\x41\x92\xe7\x88\x58\x0b\x89\xb2\x06\xa3\x2f\x67\x7e\x1c\x99\xa0\xf2\x88\xd1\xf5\x5d\x50\xa2\x15\x27\x31\x24\x20\x6c\x63\x3b\x63\x35\x71\x37\x47\xbd\xde\x01\xea\x0b\x49\xc1\xd7\x92\x03\x0a\x43\x94\x10\x41\x76\xa0\xcb\x06\xa5\x8a\x12\x0b\x51\x7e\xe3\x9d\xe3\x14\xd1\xee\xe0\xe7\xcc\x24\x18\x5d\x5d\x16\x7d\x15\x18\xa7\xd8\x82\x33\x75\xc1\xd6\x74\x57\x12\x11\x91\x1d\x08\x8b\x06\xae\x9d\xa0\xd1\x60\x23\xa5\x75\x85\xaa\x01\x3c\x2b\x88\x6d\x78\xd5\x2d\xd3\x3c\xd5\x80\x12\x4b\xf0\x30\x5f\x0c\xdd\x22\x03\x80\x38\x30\x2d\x45\xbd\x03\x03\x34\x5e\xcc\x57\x3f\x67\xd1\x6c\x31\x1e\xcd\xa2\xf1\x62\xfe\x6d\xfa\x10\xfe\xe9\x99\x27\xa6\x22\x0e\xe4\x00\x91\x14\x51\xc6\x13\x9d\x2a\xeb\x61\xc7\x93\xcf\x5e\x5e\x56\xbe\xfa\xeb\x32\xd5\xd7\xe9\xfc\x3e\x9a\xce\xd7\x93\xe5\xb7\xd1\x78\x12\x82\xdd\x07\x97\x90\xf1\x6c\x3a\x99\xaf\xbb\x40\x4d\x46\x6b\x50\x9c\xc5\xc4\x9c\xdb\xf9\x2e\x42\xbf\x65\xf0\x5d\x73\xff\x05\xce\xbe\x9b\x2a\xd5\x96\x1f\x2c\xc5\x97\x8e\x98\x9e\x4b\xb3\x63\xc6\xea\x53\x83\xb0\x95\xf1\x4b\x37\x0b\x4b\x7f\xc1\x43\x77\xf4\x73\xb6\x19\x96\xe6\x7f\x26\xe3\x72\xf2\x30\x5d\xad\x97\x7f\x44\xa3\x9f\xeb\xef\xa1\xb7\xb7\x8a\x18\x73\xa4\x5e\x37\x20\xfa\xbe\xfe\x31\x5a\xad\x7e\xbf\x8f\x7e\x8c\x1c\x3c\xbb\x5f\x0c\xc4\x1a\xac\x19\x32\x41\xe1\xd9\x2f\x1e\x1c\xfe\xbf\xce\xb4\x9c\x8c\x66\x8f\xa1\xb7\x2c\x4a\x45\x4b\x20\x3c\xe9\x88\x5a\xad\x17\xcb\xd1\xc3\x24\xf4\xb6\x8c\x83\x39\x19\x0b\x5d\xa8\xd9\xe2\x21\x9a\x4d\x7e\x9b\xcc\x42\x8f\xc2\x26\x2d\x5e\xc7\x1f\xc2\xf1\xea\x2d\xe0\xbb\x1b\x15\xa3\xfe\x6d\x10\x04\x6d\xe7\x56\x4b\x61\x41\xd0\xda\xd3\xd4\x60\xd4\xcf\x1e\xbb\x2f\xa0\x75\xca\x01\xa3\xbe\x7b\x60\xe2\x46\x67\xdb\x31\x20\xc8\x26\x03\x77\x57\x57\xdc\xff\x05\xed\xdc\xd6\xe5\x9f\xfd\xaf\xd6\xd7\xd5\x5a\xb0\xbb\x2d\xb5\x8a\xe1\xaf\x8b\xba\xee\xac\xcc\x39\x92\x6a\x76\x00\x8d\x91\x3c\x80\xe6\x24\x17\x2a\xb1\x96\xc4\xfb\x7c\xa6\x6e\xa4\xbd\x36\x45\x5f\x21\x68\xaf\x76\x40\xd4\x2f\xa8\x22\xba\xdc\x94\xcb\xf8\xfd\xef\x96\xe6\x91\xf3\xdf\x65\xee\xd5\x3a\xde\xea\x35\x7e\x7b\x2f\x1c\xc4\x1d\x19\x18\xf9\xd5\xb9\x58\xc1\xab\xc3\xab\x3d\xd5\xbf\x03\x00\x00\xff\xff\xda\x54\x83\x9a\xb9\x0f\x00\x00")

func staticConfigDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_staticConfigDockerComposeYml,
		"static/config/docker-compose.yml",
	)
}

func staticConfigDockerComposeYml() (*asset, error) {
	bytes, err := staticConfigDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/config/docker-compose.yml", size: 4025, mode: os.FileMode(420), modTime: time.Unix(1523483689, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x5b\x73\xdb\xb6\x12\x7e\xcf\xaf\xd8\x83\x39\x13\xc9\x73\x4c\x32\x39\xbd\x4c\x9b\x88\x1a\x37\xb5\x33\x4d\x27\xad\x33\x75\xfa\xd4\xa4\x1d\x88\x58\x49\x68\x40\x80\x03\x2c\xe5\x28\x9d\xfc\xf7\x0e\x00\x52\xd6\x05\x92\xe5\xd4\x0f\x0d\x5f\x08\x82\xdf\x7e\xbb\xfb\x61\x71\x21\x47\xff\x11\xa6\xa2\x65\x83\x30\xa7\x5a\x8d\x1f\x8c\xfc\x0d\x14\xd7\xb3\x92\xa1\x66\xe3\x07\x00\x00\xa3\x39\x72\x11\x9b\xe1\xb1\x46\xe2\x50\xcd\xb9\x75\x48\x25\x6b\x69\x9a\x7d\xc3\xa0\x58\x03\x90\x24\x85\xe3\x1f\x96\x0d\xda\x57\x9c\x5f\xc1\x0b\xed\x88\x2b\x85\x76\x54\xc4\x57\x37\xd0\x09\x77\x08\x73\x8b\xd3\x92\x15\x81\x64\xcb\x8d\xe6\x35\x96\x6c\x21\xf1\xba\x31\x96\x18\x54\x46\x13\x6a\x2a\xd9\xb5\x14\x34\x2f\x05\x2e\x64\x85\x59\x78\x38\x05\xa9\x25\x49\xae\x32\x57\x71\x85\xe5\xe3\xcd\xa0\x94\xd4\xef\xc0\xa2\x2a\x99\xac\x8c\x66\xe0\xb3\x2e\x99\xac\xf9\x0c\x8b\xf7\x59\xec\x8b\x81\x4c\xf9\xc2\x3f\xe6\xb2\x32\x5b\x21\x05\x8e\x08\x9a\x13\x35\xee\x49\x51\xb4\xba\x79\x37\xcb\x2b\x53\x17\x67\x95\xb2\x45\x2b\xcf\x1e\xe5\x8f\x1f\xe7\xff\xcf\x1a\x4e\xd5\xbc\xa8\x94\xcd\x5a\x99\xd7\x52\xe7\x95\x73\x2c\x06\xe0\x68\xa9\xd0\xcd\x11\x29\x11\xe2\x41\x7a\x1f\x97\xdb\xf5\x10\xba\x8f\x74\xe2\x2a\x2b\x1b\x02\x67\xab\x4f\xf7\xf2\xa7\x63\xe3\x51\x11\x99\xba\x1a\x29\x6e\x8a\x64\x34\x31\x62\xb9\xe6\x51\xc8\x05\x54\x8a\x3b\x57\xb2\x9a\x4b\x9d\xf9\x31\xe4\x52\xa3\x65\x37\xa0\x6d\xa0\x67\xdb\x01\x6c\x83\x26\x96\x6b\x21\xf5\x2c\x01\x8b\xa9\x36\x5c\xf7\xd8\x50\x78\x2c\x5d\x94\x1e\x97\xf0\x54\x08\xb9\xd8\x8a\x30\x76\xed\x8d\xba\xab\xce\xbd\x19\xee\xc3\x73\x8b\x7c\x5f\x12\x6b\x70\x6b\xae\xd9\x96\xf7\xfd\xcc\x2a\x7b\xef\xb2\xaf\xc1\x4c\xa7\x0e\xc9\xb7\xbf\xd8\xe3\x21\x69\xce\xad\xb8\x05\x9e\x32\xc9\xf6\x0e\x5b\xea\xea\x46\x80\x93\x34\xfa\x76\x57\xbb\xa3\x71\x54\x44\x13\x65\xaa\x77\x47\x06\x34\x9a\x1a\x5b\x43\x8d\x34\x37\xa2\x64\x8d\x71\xc4\x40\x8a\x92\xc9\xbe\x54\x8e\xe4\xd9\x0e\xc4\xd3\x66\x33\x6b\xda\xe6\x0e\x04\x81\x44\xf1\x09\x2a\x98\x1a\x5b\x32\x61\xfc\xe4\x61\xe3\xf3\x70\x07\x33\x85\xa5\x69\x2d\xf8\x5a\x1e\x15\x01\x77\x47\x6e\xa9\x9b\x96\xba\x65\x90\xf0\x7d\x97\x6b\xe7\x06\x1a\xc5\x2b\x9c\x1b\x25\x70\xe5\x3b\x27\x25\x18\x34\x9c\x08\xad\x2e\xd9\xef\xbf\xf1\xec\xc3\xa3\xec\xdb\xb7\xdd\xfd\x4d\xf6\x26\x7f\xfb\x3f\x06\x4e\x7e\xc0\x92\x7d\xf9\x15\xeb\x16\xef\x9e\xb1\xb8\x83\x78\x89\x79\x76\x10\x7f\xdf\x62\x63\xcd\xa5\x62\xe3\x0b\x7f\xf3\x3d\xf0\x12\x69\xe0\xe0\x42\x57\x76\xd9\xd0\x3f\xd7\x3b\xf2\x07\xc1\xbb\xe6\x86\xde\x8e\x70\x81\x67\xeb\xaa\x6f\x8b\xda\x59\x7d\x4e\x9a\x5a\x9c\x49\x47\x76\x99\xb5\xce\xcf\xa4\x5f\x1d\xda\x20\xed\x2f\x5d\xff\x7d\x56\xf1\xa6\xaf\x84\xb8\xbb\x8a\xf6\x26\x7f\x44\x93\xcf\x52\xd9\x86\x3b\x77\x6d\xfc\xd2\xfd\xaa\x6b\xdd\xb3\xc2\x2b\x07\x9b\x2a\xdf\x74\xef\x55\xf5\x06\x72\x77\x65\x8f\x83\x7a\x29\x8f\xd8\x20\x3e\x71\x1f\x99\x1a\x43\x47\x6f\x00\xc1\xda\x2b\xd4\x58\x33\xb3\xe8\xcf\x64\x1d\x57\xdf\x01\xca\x98\x86\x41\x38\xa4\x95\x4c\x48\xd7\x28\xbe\x7c\x02\xda\x68\x7c\x7a\x97\x5d\xa6\xe7\x1b\x8f\x8a\x55\xf3\x48\xbd\x8e\x97\x76\xd2\x12\x19\x0d\x42\x3a\x3e\x51\x28\x42\x66\x46\x77\xdb\x77\x7f\x92\x76\xed\xa4\x96\xc4\x7c\xc1\xd5\xeb\x5b\xe6\xea\xb0\x46\x1a\x26\xa4\xb3\xc6\xca\x9a\xdb\x25\x1b\x77\xf6\xa3\x22\xd2\xdf\xcb\xd0\xdd\x02\x39\x34\x53\xf7\x98\xee\x3f\x05\xee\x7b\x5c\x3f\x16\xfb\x4b\x98\xaa\xad\x51\x53\xce\x85\xb8\x58\xa0\xa6\x97\xd2\x11\x6a\xb4\xc3\xc1\xf9\xe5\x4f\xdf\xc7\x23\xe0\x4b\xc3\x05\x8a\xc1\x29\x0c\x4f\xa0\x1c\xc3\x5f\x1b\x0e\xfd\xb9\xdb\x28\xcc\x95\x99\x25\x6c\x4e\x9e\x6e\x26\xb4\xe0\x16\xfe\x8b\xde\x91\x83\x12\x34\x5e\x43\xf0\x7a\x65\x5a\x5b\xe1\x70\x50\xac\x86\xa6\x88\x20\x4f\xb0\x63\xdf\x81\x9e\x91\x86\xf2\x26\x83\x19\xd2\x85\x42\xdf\x7c\xb6\x7c\x21\x86\x83\x55\x11\x1c\xe2\x40\xfb\xdc\x1f\xab\x0e\xd0\xac\x80\x49\x9a\xb8\x0d\x3e\x97\xa8\xc4\x21\x92\x08\x4b\x32\x84\xcd\xf2\x56\x82\x80\x4a\xda\xaf\x26\xed\x01\xeb\x1e\xb3\x33\x1c\x6b\x52\xe6\x16\x6b\xb3\xc0\xef\x88\xac\x9c\xb4\x84\xc3\x41\x3f\xa5\x76\xad\xe2\xd8\x24\x6a\xa6\x46\xe7\xf8\x0c\x7d\xa9\x74\xcd\x44\xc5\xf4\xa1\x07\x16\x28\xe1\xc7\xab\xcb\x9f\xf3\xc6\x7f\xb1\xf7\x46\xb9\xe0\xc4\xb7\xbd\xee\x14\x5b\xb0\x1f\x9c\x46\x9e\x14\x5a\x4e\x61\x18\x5e\xe6\xe1\x2f\x42\x59\x96\xd0\x0f\xe7\x00\x1e\x3e\x8c\x86\x39\xaf\xfc\x19\x3f\xbe\x9d\x4a\x2d\xdd\xdc\xa7\x9c\x88\x39\xa4\xde\x4b\x99\x87\xd5\x31\xef\x16\x47\x28\x61\xe0\x97\xc7\xc1\xd3\xb4\xd5\x27\xc9\xdc\x5f\x45\x71\xf6\xfa\xf2\xfc\x12\x2c\x0a\x69\xb1\x22\x20\x03\x35\xd7\x7c\x86\x16\x5a\xab\x76\x6c\x3e\x1e\x52\x62\x23\x5b\x2e\xd5\xbf\x34\xd7\xde\x17\x5a\x6b\x6c\x22\xc3\x8d\xa7\x7d\x55\x1d\x27\x77\xa2\x4c\xe3\x76\xe0\xab\x34\xd6\x4e\xba\x46\xa3\x60\x8d\x0d\xf7\x73\x9c\xf2\x56\xd1\xf0\xd6\xaa\xbc\x0a\xdc\x61\xa7\x49\x66\xb9\xae\x8f\x43\x4a\x89\x73\x0a\x1b\x42\xdd\x61\x5c\xc2\x07\xe5\x20\xe1\x75\x8a\x54\xcd\xd7\xd7\xd7\xc1\xe9\x9e\x51\x8f\x5f\x98\x4f\x60\xf0\xea\xf2\xea\xf5\xe0\x34\x89\x99\x18\xe1\xcf\x03\x78\x0d\x5e\xe0\x73\x4e\x7c\xb8\xa9\xf9\xc9\xae\xdd\xc7\x93\xbc\xe2\x3e\x08\x8b\xdc\xf9\x0a\x4c\x49\xbe\xae\x26\x5a\xdb\x61\x13\x1a\xc0\xf1\xb5\xb2\x65\xbd\x51\x2d\xeb\x2f\xb7\xff\x19\xc5\x1f\x45\xa3\x22\xfe\x7c\xfc\x3b\x00\x00\xff\xff\xe4\xc8\x45\x8a\x8d\x14\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 5261, mode: os.FileMode(420), modTime: time.Unix(1523401481, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/config/docker-compose.yml": staticConfigDockerComposeYml,
	"static/index.html": staticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"config": &bintree{nil, map[string]*bintree{
			"docker-compose.yml": &bintree{staticConfigDockerComposeYml, map[string]*bintree{}},
		}},
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

