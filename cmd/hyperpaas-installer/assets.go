// Code generated by go-bindata.
// sources:
// docker-compose.yml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xcf\x6e\xdb\x30\x0c\xc6\xef\x79\x0a\x21\x97\x5e\x1a\xc7\x6d\xbc\x21\x10\x60\x60\x1b\x56\xec\xd2\x0d\xc3\xfe\x9c\x86\xa1\x60\x2c\x26\xd1\x22\x89\x02\x45\x3b\xf1\x9e\x7e\xb0\x93\xba\xee\x92\x15\xf3\x41\x30\xbf\xef\x27\x8a\x96\x28\x37\xc8\xc9\x52\xd0\x6a\xba\xc8\x6e\xa7\x93\x84\xdc\xd8\x0a\x93\x9e\x28\x25\x0c\xb8\xb6\xbb\xee\x55\xa9\x86\x5c\xed\x8f\x7a\xf7\xcc\x94\xb4\x11\xb5\x5a\xd9\x60\x4e\x92\x52\x89\x6a\xae\x50\xab\x79\x03\x3c\xe7\x3a\xcc\x0d\x55\x3b\xe4\x2c\x51\xb5\x1b\x20\x01\xde\xa0\xbc\x08\xbd\x9c\x9c\xa2\xcc\x4f\xa5\xcd\xcf\xb3\x1a\x10\xe8\xd5\x48\x2c\xa3\x72\x97\xb9\x5e\xe6\x43\x54\x14\x0b\x5d\x14\x8b\x91\xdb\xfb\x27\xc2\x7a\xd8\xa0\x1e\xbe\xff\x26\x2b\xb2\xd7\xbd\x51\x91\xf7\x10\x8c\x56\x3f\x4e\x33\xa7\x27\x66\x7a\xfd\x28\xcc\x66\x06\xd7\x50\x3b\xc1\x20\xdc\x46\xb2\x41\xd2\xf4\x5a\x4d\xb7\x22\xf1\xba\x1b\xd2\x98\xed\xa1\xcf\x03\xf4\x09\x3c\xea\x0e\x52\x6f\x8d\x61\x4c\x49\xeb\x65\xae\xbe\xa0\xb1\x8c\x95\x64\x77\x03\xad\xff\x3b\x53\x7a\x4a\x55\x14\x0b\xf5\xed\xfe\xeb\x78\x16\x54\x1e\xff\x8e\xb3\xa7\xca\xcb\xb3\x65\x8e\x80\x07\xeb\x4a\x38\xa0\x7b\x83\x52\x6d\xb1\x41\xe6\x36\x5b\xd9\xdf\x67\x64\x12\x62\xd8\x60\xd9\x1f\xcb\xbc\x97\x7e\x25\x0a\x67\x1c\x05\x83\xdd\xce\x96\xc2\xf5\xb3\x82\x8e\xcd\x71\xae\x64\x69\x0f\xec\x3d\x99\x0b\x74\x86\x87\x48\x09\xcd\xaa\x3d\x1d\xc5\x3f\xb2\x66\x86\x3c\xd8\x50\x5e\x3a\xc3\x23\xb0\x07\xa9\xb6\x63\x7d\x8f\xab\x71\xe8\x68\x73\x8f\x0d\xba\xf2\xfd\xdd\xbb\xef\x1f\xa6\xbd\xf1\xb3\x1f\x03\xca\x9e\x78\x37\x6a\xc0\x6d\x1b\x91\x23\x40\xea\x15\x83\xd1\x51\xfb\xe8\x32\x1e\xbb\x7b\xc0\x95\x72\xd6\x5b\x19\xc5\x4a\x79\xf4\xc4\xad\x56\x37\x79\xfe\x71\x90\x19\xbb\x1b\x0b\x62\x29\x5c\x84\x5f\x0d\x2c\x63\x12\x60\x79\x88\xe4\x6c\xd5\x3e\xb1\x15\x05\x63\xa5\xff\x05\x50\x98\xad\xc1\xba\x9a\x71\x70\x0d\x3a\xe8\xd2\xa4\x41\xf1\x70\x78\x00\x11\xf4\x51\x92\x56\xb7\xf9\x60\xec\x6d\x30\xb4\xd7\x6a\xb1\xcc\x1f\xe9\xe8\xa0\x42\x8f\x41\x9e\x2d\x97\x84\xa1\xeb\xd3\x71\xbd\x33\x75\x15\xc8\x60\xc6\xe4\x50\x95\xa5\xf2\x10\x60\x83\x7c\x75\x01\x89\x0e\x64\x4d\xec\x33\x4a\x1d\xe9\x6c\xa8\x0f\x57\x93\xc9\x78\xc7\x87\xbd\x3e\x2e\x61\xd8\x36\xc8\x5a\x51\x83\xec\xa0\xed\x35\x10\x81\x6a\x0b\x2b\xd7\x5f\xf4\x1a\x27\x7f\x02\x00\x00\xff\xff\xd4\x88\xae\x7d\x09\x05\x00\x00")

func dockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_dockerComposeYml,
		"docker-compose.yml",
	)
}

func dockerComposeYml() (*asset, error) {
	bytes, err := dockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker-compose.yml", size: 1289, mode: os.FileMode(420), modTime: time.Unix(1515672601, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"docker-compose.yml": dockerComposeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"docker-compose.yml": &bintree{dockerComposeYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

