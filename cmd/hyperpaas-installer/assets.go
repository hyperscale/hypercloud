// Code generated by go-bindata.
// sources:
// docker-compose.yml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x41\x6f\xdb\x3a\x0c\xc7\xef\xf9\x14\x82\x2f\xbd\x34\x8e\xdb\xf8\x3d\x04\x02\x0c\xbc\x37\x6c\xd8\xa5\x1b\x06\x6c\x3b\x0d\x43\xc1\x58\x4c\xa2\x45\x12\x05\x8a\x76\xe2\x7d\xfa\xc1\x4e\xea\xba\x4b\x56\xcc\x07\xc1\xfc\xff\x7f\xa2\x68\x9a\x6a\x91\x93\xa5\xa0\x55\xb6\xcc\xef\xb3\x59\x42\x6e\x6d\x8d\x49\xcf\x94\x12\x06\xdc\xd8\x7d\xff\xaa\x54\x4b\xae\xf1\x27\xbd\x7f\xe6\x4a\xba\x88\x5a\xad\x6d\x30\x67\x49\xa9\x44\x0d\xd7\xa8\xd5\xa2\x05\x5e\x70\x13\x16\x86\xea\x3d\x72\x9e\xa8\xde\x8f\x90\x00\x6f\x51\x5e\x85\x5e\x4f\x4e\x51\x16\xe7\xd2\x16\x97\x59\x0d\x08\x0c\x6a\x24\x96\x49\xb9\xab\x42\xaf\x8a\x31\x2a\xcb\xa5\x2e\xcb\xe5\xc4\x1d\xfc\x33\x61\x3d\x6c\x51\x8f\xdf\x7f\x97\x97\xf9\xbf\x83\x51\x93\xf7\x10\x8c\x56\xdf\xce\x3b\xb3\x33\x93\xdd\x3e\x09\xf3\xb9\xc1\x0d\x34\x4e\x30\x08\x77\x91\x6c\x90\x94\xdd\xaa\x6c\x27\x12\x6f\xfb\x25\x4d\xd9\x01\xfa\x34\x42\x1f\xc1\xa3\xee\x21\xf5\xbf\x31\x8c\x29\x69\xbd\x2a\xfe\x86\x4f\xcf\x1b\xca\x72\xa9\xbe\x3c\x7c\x9e\xee\x82\xda\xe3\xef\x71\xfe\x5c\x5f\x75\x51\xd6\x09\xf0\x60\x5d\x05\x47\x74\xff\xa1\xd4\x3b\x6c\x91\xb9\xcb\xd7\xf6\xe7\x05\x99\x84\x18\xb6\x58\x0d\xcd\x5f\x0c\xd2\x8f\x44\xe1\x82\xa3\x60\xb0\xef\x5f\x25\xdc\xbc\x28\xe8\x34\x02\x97\x4a\x9e\x0e\xc0\xde\x93\xb9\x42\xe7\x78\x8c\x94\xd0\xac\xbb\x73\xc3\xff\x90\x35\x37\xe4\xc1\x86\xea\xda\x9f\x3a\x01\x07\x90\x7a\x37\xd5\x0f\xb8\x9e\x86\x8e\xb6\x0f\xd8\xa2\xab\xde\xbe\x7b\xf3\xf5\x7d\x36\x18\xdf\x87\x35\xa0\x1c\x88\xf7\x93\x31\xdb\x75\x11\x39\x02\xa4\x41\x31\x18\x1d\x75\x4f\x2e\xe3\x69\x86\x47\x5c\x29\x67\xbd\x95\x49\xac\x94\x47\x4f\xdc\x69\x75\x57\x14\x1f\x46\x99\xb1\xbf\x97\x20\x96\xc2\x55\xf8\x9f\x91\x65\x4c\x02\x2c\x8f\x91\x9c\xad\xbb\x67\xb6\xa6\x60\xac\x0c\x17\x9d\xc2\x7c\x03\xd6\x35\x8c\xa3\x6b\xd0\x41\x9f\x26\x8d\x8a\x87\xe3\x23\x88\xa0\x8f\x92\xb4\xba\x2f\x46\xe3\x60\x83\xa1\x83\x56\xcb\x55\xf1\x44\x47\x07\x35\x7a\x0c\xf2\xe2\xb8\x24\x0c\xfd\x9c\x4e\xeb\x9d\xab\x9b\x40\x06\x73\x26\x87\xaa\xaa\x94\x87\x00\x5b\xe4\x9b\x2b\x48\x74\x20\x1b\x62\x9f\x53\xea\x49\x67\x43\x73\xbc\x99\xcd\xa6\x1d\x1f\x7b\x7d\x3a\xc2\xb0\x6d\x91\xb5\xa2\x16\xd9\x41\x37\x68\x20\x02\xf5\x0e\xd6\x6e\xb8\xce\x0d\xce\x7e\x05\x00\x00\xff\xff\xcd\x66\xf6\x09\xef\x04\x00\x00")

func dockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_dockerComposeYml,
		"docker-compose.yml",
	)
}

func dockerComposeYml() (*asset, error) {
	bytes, err := dockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker-compose.yml", size: 1263, mode: os.FileMode(420), modTime: time.Unix(1515218293, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"docker-compose.yml": dockerComposeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"docker-compose.yml": &bintree{dockerComposeYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

